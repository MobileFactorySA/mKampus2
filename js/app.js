// Generated by CoffeeScript 1.3.1
(function() {
  var AddView, Answer, Answers, App, CollectionView, ContactElement, ContactElementView, ContactElements, ContactGroup, ContactGroupShowView, ContactGroupView, ContactGroups, ElementView, GroupShowView, Image, InformationElement, InformationElementView, InformationElements, InformationGroup, InformationGroupShowView, InformationGroupView, InformationGroups, LoadableCollection, LoginView, MenuCollectionView, MenuItem, MenuItems, MenuLayout, ModelWithImage, Notification, NotificationView, Notifications, NotificationsView, Place, PlaceShowView, PlaceView, Places, Question, QuestionEditView, QuestionView, Questions, Restaurant, RestaurantMenuItemView, RestaurantUser, RestaurantUserShowView, RestaurantUserView, RestaurantUsers, RestaurantView, Restaurants, SelectableView, SidebarLayout, SortableCollection, SortableCollectionView, Survey, SurveyEditView, SurveyShowView, SurveyView, Surveys, User, Users, View, helper, partial,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  StackMob.init({
    appName: "mkampus2",
    clientSubdomain: "mobilefactorysa",
    apiVersion: 1
  });

  moment.lang('pl');

  (function(String) {
    var templateCache, _base;
    (_base = String.prototype).startsWith || (_base.startsWith = function(str) {
      return this.indexOf(str) === 0;
    });
    templateCache = {};
    String.prototype.template = function() {
      return templateCache[this] || (templateCache[this] = Handlebars.compile(this));
    };
    String.prototype.render = function(data) {
      var templateData;
      templateData = _.extend(_.clone(window.globals), data);
      return this.template()(templateData);
    };
    String.prototype.toURL = function() {
      return encodeURIComponent(this);
    };
    return String.prototype.fromURL = function() {
      return decodeURIComponent(this);
    };
  })(String);

  partial = function(sources) {
    var name, source, _results;
    _results = [];
    for (name in sources) {
      source = sources[name];
      _results.push(Handlebars.registerPartial(name, source));
    }
    return _results;
  };

  helper = function(helpers) {
    var fn, name, _results;
    _results = [];
    for (name in helpers) {
      fn = helpers[name];
      _results.push(Handlebars.registerHelper(name, fn));
    }
    return _results;
  };

  partial({
    navbar: "<div class=\"navbar navbar-fixed-top\">\n  <div class=\"navbar-inner\">\n    <div class=\"container\">\n      <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\">\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </a>\n      <div class=\"nav-collapse collapse\">\n        <ul class=\"nav\">\n          {{#links}}\n            <li {{#if active}}class=\"active\"{{/if}}>\n              <a class=\"link\" href=\"{{href}}\">{{label}}</a>\n            </li>\n          {{/links}}\n        </ul>\n        <ul class=\"nav pull-right\">\n          {{#if current_user }}\n            <li>\n              <a href=\"/\">\n                <i class=\"icon-off icon-white\"></i>\n                Wyloguj ( {{ current_user }} )\n              </a>\n            </li>\n          {{/if}}\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>"
  });

  helper({
    if_eq: function(context, options) {
      if (context === options.hash.compare) {
        return options.fn(context);
      } else {
        return options.inverse(context);
      }
    }
  });

  helper({
    restaurantNavbar: function(context) {
      return "{{> navbar}}".render({
        links: [
          {
            href: '#',
            label: 'Restauracja',
            active: true
          }
        ]
      });
    }
  });

  helper({
    navbar: function(context) {
      return "{{> navbar}}".render({
        links: [
          {
            href: '#/notifications',
            label: 'Powiadomienia'
          }, {
            href: '#/surveys',
            label: 'Ankiety'
          }, {
            href: '#/informations',
            label: 'Informacje'
          }, {
            href: '#/map',
            label: 'Mapa'
          }, {
            href: '#/restaurants',
            label: 'Restauracje'
          }, {
            href: '#/contact',
            label: 'Kontakt'
          }
        ]
      });
    }
  });

  partial({
    footer: "<footer>\n  <a href=\"http://www.mobilefactory.com/pl/mkampus/\"><img src=\"/img/mkampus.png\"/></a>\n  <img src=\"/img/logo.png\" />\n</footer>"
  });

  helper({
    footer: function() {
      return "{{> footer}}".render();
    }
  });

  helper({
    header: function(title, options) {
      return "<header>\n  <div class=\"container list-view\">\n    <div class=\"row\">\n      <div class=\"span4 category\">\n        <h1>{{title}}</h1>\n      </div>\n      \n      <div class=\"span8 add-section\">\n        {{{add_section}}}\n      </div>\n    </div>\n  </div>\n</header>".render({
        title: title,
        add_section: options.fn(this)
      });
    }
  });

  helper({
    items: function(id) {
      return "<div class=\"container\">\n  <section>\n  <div class=\"row\" id=\"{{id}}\">\n    ...\n  </div>\n  </section>\n</div>".render({
        id: id
      });
    }
  });

  helper({
    layout: function(options) {
      return "{{{navbar}}}\n{{{content}}}".render({
        content: options.fn(this)
      });
    }
  });

  helper({
    timeHuman: function(time) {
      var timestamp;
      timestamp = moment(time);
      return timestamp.format('LLL');
    }
  });

  helper({
    timeAgo: function(time) {
      var timestamp;
      timestamp = moment(time);
      return timestamp.fromNow();
    }
  });

  helper({
    timeSwitch: function(time) {
      return "<span class=\"hover-switch\">\n  <span class=\"hover-on\">{{ timeHuman time }}</span>\n  <span class=\"hover-off\">{{ timeAgo time }}</span>\n</span>".render({
        time: time
      });
    }
  });

  User = (function(_super) {

    __extends(User, _super);

    User.name = 'User';

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    return User;

  })(StackMob.User);

  Users = (function(_super) {

    __extends(Users, _super);

    Users.name = 'Users';

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.model = User;

    return Users;

  })(StackMob.Collection);

  LoginView = (function(_super) {

    __extends(LoginView, _super);

    LoginView.name = 'LoginView';

    function LoginView() {
      this.submit = __bind(this.submit, this);
      return LoginView.__super__.constructor.apply(this, arguments);
    }

    LoginView.prototype.template = "<div class=\"container\" id=\"login\">\n\n  <form action=\"POST\" class=\"form-horizontal login-form\">\n  <div class=\"modal login-modal\" style=\"position: relative; top: auto; left: auto; margin: 0 auto; z-index: 1; max-width: 100%;\">\n    <div class=\"modal-header\">\n      <h3>Uniwersytet Ekonomiczny we Wrocławiu</h3>\n    </div>\n    <div class=\"modal-body\">\n        <fieldset>\n\n          <div class=\"control-group\">\n            <label for=\"login-input\" class=\"control-label\">Login</label>\n            <div class=\"controls\"><input type=\"text\" id=\"login-input\" class=\"input-xlarge\" autofocus /></div>\n          </div>\n          <div class=\"control-group\">\n            <label for=\"password-input\" class=\"control-label\">Hasło</label>\n            <div class=\"controls\"><input type=\"password\" id=\"password-input\" class=\"input-xlarge\" /></div>\n          </div>\n        </fieldset>\n\n    </div>\n    <div class=\"modal-footer\">\n      <input id=\"login-button\" type=\"submit\" class=\"btn btn-big btn-primary\" value=\"Zaloguj\" />\n    </div>\n  </div>\n  </form>\n  {{{ footer }}}\n</div>";

    LoginView.prototype.events = {
      submit: 'submit'
    };

    LoginView.prototype.submit = function(e) {
      var user,
        _this = this;
      e.preventDefault();
      $('#login-button').button('toggle');
      user = new User({
        username: this.$('#login-input').val(),
        password: this.$('#password-input').val()
      });
      return user.login(false, {
        success: function(u) {
          return _this.trigger('login', user);
        },
        error: function(u, e) {
          _this.$('.control-group').addClass('error');
          return $('#login-button').button('toggle');
        }
      });
    };

    LoginView.prototype.render = function() {
      this.$el.html(this.template.render());
      this.$('#login-input').focus();
      return this;
    };

    return LoginView;

  })(Backbone.View);

  LoadableCollection = (function(_super) {

    __extends(LoadableCollection, _super);

    LoadableCollection.name = 'LoadableCollection';

    function LoadableCollection() {
      return LoadableCollection.__super__.constructor.apply(this, arguments);
    }

    LoadableCollection.prototype.load = function() {
      var _this = this;
      if (this.fetchPromise == null) {
        this.fetchPromise = $.Deferred();
        this.fetch({
          success: function() {
            return _this.fetchPromise.resolve(_this);
          }
        });
      }
      return this.fetchPromise;
    };

    return LoadableCollection;

  })(StackMob.Collection);

  SortableCollection = (function(_super) {

    __extends(SortableCollection, _super);

    SortableCollection.name = 'SortableCollection';

    function SortableCollection() {
      return SortableCollection.__super__.constructor.apply(this, arguments);
    }

    SortableCollection.prototype.comparator = function(model) {
      return model.get('position');
    };

    SortableCollection.prototype.parse = function(response) {
      return _(response).reject(function(model) {
        return model.is_deleted;
      });
    };

    SortableCollection.prototype.newPosition = function() {
      var last, sorted;
      if (this.length > 0) {
        sorted = _(this.pluck('position').sort(function(a, b) {
          return a - b;
        }));
        last = sorted.last() > this.length ? sorted.last() : this.length;
        return last + 1;
      } else {
        return 1;
      }
    };

    SortableCollection.prototype.createNew = function() {
      return new this.model({
        position: this.newPosition()
      });
    };

    return SortableCollection;

  })(LoadableCollection);

  View = (function(_super) {

    __extends(View, _super);

    View.name = 'View';

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.getImagePreview = function() {
      return this.$('.image-preview');
    };

    View.prototype.onImageChange = function(e) {
      var file, fileContent, reader,
        _this = this;
      e.stopPropagation();
      e.preventDefault();
      file = e.target.files[0];
      reader = new FileReader();
      reader.onload = function(e) {
        var $image;
        $image = _this.getImagePreview();
        $image.attr('src', e.target.result);
        return setTimeout(function() {
          var base64Content, fileName, fileType, height, width;
          width = $image[0].clientWidth;
          height = $image[0].clientHeight;
          console.log('WH after', width, height);
          _this.model.set({
            image_width: width,
            image_height: height
          });
          base64Content = e.target.result.substring(e.target.result.indexOf(',') + 1, e.target.result.length);
          fileName = file.name;
          fileType = file.type;
          _this.model.setBinaryFile('image_url', fileName, fileType, base64Content);
          return _this.model.setBinaryFile('image_content', fileName, fileType, base64Content);
        }, 1000);
      };
      return fileContent = reader.readAsDataURL(file);
    };

    return View;

  })(Backbone.View);

  CollectionView = (function(_super) {

    __extends(CollectionView, _super);

    CollectionView.name = 'CollectionView';

    function CollectionView() {
      this.addOne = __bind(this.addOne, this);

      this.addAll = __bind(this.addAll, this);
      return CollectionView.__super__.constructor.apply(this, arguments);
    }

    CollectionView.prototype.waitForCollection = function() {
      if (this.$collection) {
        return this.$collection.html("<section class=\"item loading\"><img src=\"/img/progress.gif\"/></section>");
      }
    };

    CollectionView.prototype.initialize = function() {
      var _this = this;
      this.waitForCollection();
      this.itemView || (this.itemView = this.options.itemView);
      return $.when(this.collection).then(function(collection) {
        collection.on('reset', _this.addAll);
        collection.on('add', _this.addAll);
        return collection.on('remove', _this.addAll);
      });
    };

    CollectionView.prototype.addAll = function() {
      var $collection,
        _this = this;
      $collection = this.$collection || this.$el;
      return $.when(this.collection).then(function(collection) {
        $collection.empty();
        return collection.each(_this.addOne);
      });
    };

    CollectionView.prototype.addOne = function(model) {
      var options, view;
      options = _.extend(_.clone(this.options), {
        model: model,
        collection: this.collection
      });
      view = new this.itemView(options);
      if (this.$collection != null) {
        return this.$collection.append(view.render().el);
      }
    };

    CollectionView.prototype.render = function() {
      this.$collection || (this.$collection = this.$el);
      this.waitForCollection();
      this.addAll();
      return this;
    };

    return CollectionView;

  })(View);

  AddView = (function(_super) {

    __extends(AddView, _super);

    AddView.name = 'AddView';

    function AddView() {
      return AddView.__super__.constructor.apply(this, arguments);
    }

    AddView.prototype.template = "<input type=\"text\" class=\"add\" placeholder=\"{{ placeholder }}\"/>";

    AddView.prototype.events = {
      'click input': 'add'
    };

    AddView.prototype.add = function(event) {
      this.collection.trigger('new');
      return this.trigger('click');
    };

    AddView.prototype.getPlaceholder = function() {
      return this.options.placeholder || "Dodaj";
    };

    AddView.prototype.render = function() {
      this.$el.html(this.template.render({
        placeholder: this.getPlaceholder()
      }));
      return this;
    };

    return AddView;

  })(Backbone.View);

  MenuLayout = (function(_super) {

    __extends(MenuLayout, _super);

    MenuLayout.name = 'MenuLayout';

    function MenuLayout() {
      return MenuLayout.__super__.constructor.apply(this, arguments);
    }

    MenuLayout.prototype.template = "{{#layout}}\n  <header>\n    <div class=\"container list-view\">\n      <div class=\"row\">\n        <div class=\"span4 category\">\n          <h1>{{ title }}</h1>\n        </div>\n        <div class=\"span8 add-section\">\n        </div>\n      </div>\n    </div>\n  </header>\n  <div class=\"container\">\n    <section>\n      <div class=\"row menu\">\n        <div class=\"progress\"><img src=\"/img/progress.gif\"></img></div>\n      </div>\n    </section>\n  </div>\n{{/layout}}";

    MenuLayout.prototype.render = function() {
      var $addSection, $list, addView, collection, listView, title;
      collection = this.collection;
      title = this.title || this.options.title;
      addView = this.addView || this.options.addView;
      listView = this.listView || this.options.listView;
      this.$el.html(this.template.render({
        title: title
      }));
      $addSection = this.$('.add-section');
      $list = this.$('.menu');
      addView.setElement($addSection);
      listView.setElement($list);
      addView.render();
      listView.render();
      return this;
    };

    return MenuLayout;

  })(Backbone.View);

  SidebarLayout = (function(_super) {

    __extends(SidebarLayout, _super);

    SidebarLayout.name = 'SidebarLayout';

    function SidebarLayout() {
      return SidebarLayout.__super__.constructor.apply(this, arguments);
    }

    SidebarLayout.prototype.template = "{{#layout}}\n  <div class=\"container item-view\">\n    <div class=\"row\">\n      <div class=\"span4\">\n        <div class=\"category\">\n          <a href=\"{{ backLink }}\"><h1>{{ title }}</h1></a>\n        </div>\n        <div class=\"row hidden-phone menu\">\n        </div>\n      </div>\n      <div class=\"span8 main\">\n      </div>\n    </div>\n  </div>\n{{/layout}}";

    SidebarLayout.prototype.render = function() {
      var $main, $menu, backLink, listView, mainView, title;
      title = this.title || this.options.title;
      backLink = this.backLink || this.options.backLink;
      mainView = this.mainView || this.options.mainView;
      listView = this.listView || this.options.listView;
      this.$el.html(this.template.render({
        title: title,
        backLink: backLink
      }));
      $main = this.$('.main');
      $menu = this.$('.menu');
      mainView.setElement($main);
      mainView.render();
      listView.setElement($menu);
      listView.render();
      return this;
    };

    return SidebarLayout;

  })(Backbone.View);

  SelectableView = (function(_super) {

    __extends(SelectableView, _super);

    SelectableView.name = 'SelectableView';

    function SelectableView() {
      this.render = __bind(this.render, this);

      this.triggerSelect = __bind(this.triggerSelect, this);
      return SelectableView.__super__.constructor.apply(this, arguments);
    }

    SelectableView.prototype.labelAttribute = 'name';

    SelectableView.prototype.placeholderLabel = 'Nowy element';

    SelectableView.prototype.className = 'selectable sortable span4';

    SelectableView.prototype.attributes = function() {
      return {
        'data-id': this.model.id,
        'data-sortable-id': this.model.id
      };
    };

    SelectableView.prototype.template = function() {
      return "<!-- <div class=\"selectable sortable span4\" data-id=\"{{ id }}\" data-sortable-id= \"{{ id }}\"> -->\n<!-- <div class=\"{{#if hasChanged}} waiting {{/if}}\"> -->\n  <p class=\"date\">{{{ timeSwitch createddate }}}</p>\n  <p class=\"content\">\n    {{#if " + this.labelAttribute + " }} {{ " + this.labelAttribute + " }} {{else}} " + this.placeholderLabel + " {{/if}}\n  </p>\n<!-- </div> -->";
    };

    SelectableView.prototype.initialize = function() {
      this.$el.data('id', this.model.id);
      this.$el.data('sortable-id', this.model.id);
      this.model.on('change', this.render);
      this.model.on('reset', this.render);
      return this.model.on('sync', this.render);
    };

    SelectableView.prototype.events = {
      'click': 'triggerSelect'
    };

    SelectableView.prototype.triggerSelect = function() {
      var _ref;
      if ((_ref = this.model) != null) {
        _ref.trigger('select', this.model);
      }
      return this.trigger('select', this.model);
    };

    SelectableView.prototype.render = function() {
      this.$el.html(this.template().render(_.extend(this.model.toJSON(), {
        id: this.model.id,
        hasChanged: this.model.hasChanged()
      })));
      this.$el.toggleClass('waiting', this.model.hasChanged());
      window.app.updateLinks();
      return this;
    };

    return SelectableView;

  })(View);

  Image = (function(_super) {

    __extends(Image, _super);

    Image.name = 'Image';

    function Image() {
      return Image.__super__.constructor.apply(this, arguments);
    }

    Image.prototype.schemaName = 'image';

    return Image;

  })(StackMob.Model);

  ModelWithImage = (function(_super) {

    __extends(ModelWithImage, _super);

    ModelWithImage.name = 'ModelWithImage';

    function ModelWithImage() {
      this.fallbackToDefaultImage = __bind(this.fallbackToDefaultImage, this);

      this.preventImageDestruction = __bind(this.preventImageDestruction, this);

      this.beforeSave = __bind(this.beforeSave, this);

      this.updateImageModel = __bind(this.updateImageModel, this);
      return ModelWithImage.__super__.constructor.apply(this, arguments);
    }

    ModelWithImage.prototype.initialize = function() {
      return this.on('sync', this.updateImageModel, this);
    };

    ModelWithImage.prototype.getImageId = function() {
      return "" + this.constructor.name + "_" + this.id;
    };

    ModelWithImage.prototype.updateImageModel = function() {
      var image;
      image = new Image({
        image_id: this.get('image'),
        width: this.get('image_width'),
        height: this.get('image_height'),
        url: this.get('image_url')
      });
      image.save({}, {
        error: function() {
          return image.create();
        }
      });
      this.fallbackToDefaultImage();
      if (this.hasChanged()) {
        return this.save();
      }
    };

    ModelWithImage.prototype.defaultImage = function() {};

    ModelWithImage.prototype.getImageURL = function() {
      var content, imageData, img, type;
      if (img = this.get('image_url')) {
        imageData = img.split("\n");
        if (imageData.length === 5) {
          type = imageData[0].split(" ")[1];
          content = imageData[4];
          return "data:" + type + ";base64," + content;
        } else {
          return img;
        }
      } else {
        return this.defaultImage();
      }
    };

    ModelWithImage.prototype.templateData = function() {
      return _.extend(this.toJSON(), {
        image_url: this.getImageURL()
      });
    };

    ModelWithImage.prototype.save = function() {
      this.beforeSave();
      return ModelWithImage.__super__.save.apply(this, arguments);
    };

    ModelWithImage.prototype.beforeSave = function() {
      this.preventImageDestruction();
      return this.fallbackToDefaultImage();
    };

    ModelWithImage.prototype.preventImageDestruction = function() {
      var content, url;
      content = this.get('image_content');
      url = this.get('image_url');
      if (content && content !== url) {
        return this.set({
          image_url: content
        });
      }
    };

    ModelWithImage.prototype.fallbackToDefaultImage = function() {
      if (this.id && !this.has('image')) {
        return this.set({
          image: this.getImageId()
        });
      }
    };

    return ModelWithImage;

  })(StackMob.Model);

  Notification = (function(_super) {

    __extends(Notification, _super);

    Notification.name = 'Notification';

    function Notification() {
      return Notification.__super__.constructor.apply(this, arguments);
    }

    Notification.prototype.schemaName = 'notification';

    Notification.maxLength = 200;

    Notification.maxDisplayLength = 100;

    return Notification;

  })(StackMob.Model);

  Notifications = (function(_super) {

    __extends(Notifications, _super);

    Notifications.name = 'Notifications';

    function Notifications() {
      return Notifications.__super__.constructor.apply(this, arguments);
    }

    Notifications.prototype.model = Notification;

    Notifications.prototype.comparator = function(model) {
      return -model.get('createddate');
    };

    return Notifications;

  })(LoadableCollection);

  NotificationView = (function(_super) {

    __extends(NotificationView, _super);

    NotificationView.name = 'NotificationView';

    function NotificationView() {
      return NotificationView.__super__.constructor.apply(this, arguments);
    }

    NotificationView.prototype.className = 'notification span4';

    NotificationView.prototype.template = "<p class=\"date\">{{{ timeSwitch createddate }}}</p>\n<p class=\"content\">{{ content }}</p>";

    NotificationView.prototype.render = function() {
      this.$el.html(this.template.render(this.model.toJSON()));
      return this;
    };

    return NotificationView;

  })(Backbone.View);

  NotificationsView = (function(_super) {

    __extends(NotificationsView, _super);

    NotificationsView.name = 'NotificationsView';

    function NotificationsView() {
      this.reset = __bind(this.reset, this);
      return NotificationsView.__super__.constructor.apply(this, arguments);
    }

    NotificationsView.prototype.itemView = NotificationView;

    NotificationsView.prototype.template = "{{#layout}}\n  {{#header \"Powiadomienia\"}}\n    <form action=\"\" id=\"new-notification-form\" class=\"editable\">\n      <textarea name=\"\" id=\"new-notification-input\" rows=\"1\" class=\"add\" placeholder=\"Treść nowego powiadomienia\"></textarea>\n      <div class=\"form-actions edit\">\n        <div class=\"row-fluid\">\n          <div class=\"span6\">\n            <div class=\"progress\" id=\"new-notification-progress\">\n              <div id=\"new-notification-bar\" class=\"bar\" style=\"width: 0%;\"></div>\n            </div>\n          </div>\n          <div class=\"span6\">\n            <button type=\"submit\" id=\"new-notification-submit\" data-loading-text=\"Wysyłam...\" class=\"btn btn-primary btn-large pull-right\">\n              <i class=\"icon-ok icon-white\"></i>\n              Wyślij\n            </button>\n            <!-- <input type=\"submit\" id=\"new-notification-submit\" data-loading-text=\"Wysyłam...\" class=\"btn btn-primary btn-large pull-right\" value=\"Wyślij\" /> -->\n          </div>\n        </div>\n      </div>\n    </form>\n  {{/header}}\n  {{{items \"notifications\"}}}\n{{/layout}}";

    NotificationsView.prototype.events = {
      'focus #new-notification-input': 'edit',
      'blur #new-notification-input': 'show',
      'keyup #new-notification-input': 'update',
      'submit #new-notification-form': 'submit'
    };

    NotificationsView.prototype.initialize = function() {
      this.options.prepend = true;
      return NotificationsView.__super__.initialize.apply(this, arguments);
    };

    NotificationsView.prototype.edit = function() {
      this.$editable.addClass('active');
      return this.$input.attr('rows', 4);
    };

    NotificationsView.prototype.show = function() {
      if (this.$input.val().length > 0) {
        return;
      }
      this.$editable.removeClass('active');
      return this.$input.attr('rows', 1);
    };

    NotificationsView.prototype.update = function() {
      var barClass, letters, max, percent;
      max = Notification.maxLength;
      letters = this.$input.val().length;
      percent = letters / max * 100;
      barClass = letters <= Notification.maxDisplayLength ? 'progress-success' : percent <= 100 ? 'progress-warning' : 'progress-danger';
      this.$submit.toggleClass('disabled', percent > 100 || letters === 0);
      if (percent > 100) {
        percent = 100;
      }
      this.$bar.attr('style', "width: " + percent + "%;");
      return this.$progress.attr('class', "progress " + barClass);
    };

    NotificationsView.prototype.reset = function() {
      this.$input.val('');
      this.update();
      this.$submit.button('reset');
      return this.show();
    };

    NotificationsView.prototype.submit = function(e) {
      var content,
        _this = this;
      e.preventDefault();
      content = this.$input.val();
      if (content.length < 0 || content.length > Notification.maxLength) {
        return;
      }
      this.$submit.button('loading');
      return StackMob.customcode('broadcast', {
        content: content
      }, {
        success: function() {
          return _this.collection.create({
            content: content
          }, {
            wait: true,
            success: function() {
              return _this.reset();
            },
            failure: function() {
              alert('Powiadomienie wysłano, ale nastąpił problem z bazą danych w wyniku czego nie pojawi się na liście. Przepraszamy.');
              return _this.reset();
            }
          });
        },
        error: function() {
          alert('Błąd podczas wysyłania powiadomienia. Spróbuj ponownie później.');
          return _this.$submit.button('reset');
        }
      });
    };

    NotificationsView.prototype.render = function() {
      this.$el.html(this.template.render());
      this.$input = this.$('#new-notification-input');
      this.$progress = this.$('#new-notification-progress');
      this.$bar = this.$('#new-notification-bar');
      this.$submit = this.$('#new-notification-submit');
      this.$editable = this.$('.editable');
      this.$collection = this.$('#notifications');
      NotificationsView.__super__.render.apply(this, arguments);
      this.update();
      return this;
    };

    return NotificationsView;

  })(CollectionView);

  Survey = (function(_super) {

    __extends(Survey, _super);

    Survey.name = 'Survey';

    function Survey() {
      this.saveQuestions = __bind(this.saveQuestions, this);
      return Survey.__super__.constructor.apply(this, arguments);
    }

    Survey.prototype.schemaName = 'survey';

    Survey.prototype.defaults = function() {
      return {
        title: ''
      };
    };

    Survey.prototype.validate = function(_arg) {
      var title;
      title = _arg.title;
      if (title.length < 1) {
        return "Ankieta musi mieć tytuł";
      }
      return null;
    };

    Survey.prototype.initialize = function() {
      return this.on('sync', this.saveQuestions);
    };

    Survey.prototype.saveQuestions = function() {
      var _this = this;
      return this.questions.each(function(model) {
        return model.save({
          survey: _this.id
        });
      });
    };

    Survey.prototype.getQuestions = function() {
      var fetchMyQuestions,
        _this = this;
      if (this.fetchQuestionsPromise == null) {
        this.fetchQuestionsPromise = $.Deferred();
        this.questions = new Questions();
        if (this.id != null) {
          fetchMyQuestions = new StackMob.Collection.Query();
          fetchMyQuestions.equals('survey', this.id);
          this.questions.query(fetchMyQuestions);
          this.questions.on('reset', function() {
            return _this.fetchQuestionsPromise.resolve(_this.questions);
          });
        } else {
          this.fetchQuestionsPromise.resolve(this.questions);
        }
      }
      return this.fetchQuestionsPromise;
    };

    return Survey;

  })(StackMob.Model);

  Surveys = (function(_super) {

    __extends(Surveys, _super);

    Surveys.name = 'Surveys';

    function Surveys() {
      return Surveys.__super__.constructor.apply(this, arguments);
    }

    Surveys.prototype.model = Survey;

    Surveys.prototype.comparator = function(model) {
      return -model.get('createddate');
    };

    return Surveys;

  })(LoadableCollection);

  Answer = (function(_super) {

    __extends(Answer, _super);

    Answer.name = 'Answer';

    function Answer() {
      return Answer.__super__.constructor.apply(this, arguments);
    }

    Answer.prototype.schemaName = 'answer';

    return Answer;

  })(StackMob.Model);

  Answers = (function(_super) {

    __extends(Answers, _super);

    Answers.name = 'Answers';

    function Answers() {
      return Answers.__super__.constructor.apply(this, arguments);
    }

    Answers.prototype.model = Answer;

    Answers.prototype.toJSON = function() {
      return null;
    };

    Answers.prototype.getContents = function() {
      return _(this.pluck('content').map(function(content) {
        try {
          return JSON.parse(content);
        } catch (error) {
          return content;
        }
      })).reject(function(element) {
        return _(element).isNull();
      });
    };

    return Answers;

  })(StackMob.Collection);

  Question = (function(_super) {

    __extends(Question, _super);

    Question.name = 'Question';

    function Question() {
      return Question.__super__.constructor.apply(this, arguments);
    }

    Question.prototype.schemaName = 'question';

    Question.prototype.defaults = {
      type: '1',
      content: '',
      answers: ''
    };

    Question.prototype.getUserAnswers = function() {
      var fetchMyAnswers,
        _this = this;
      if (this.fetchAnswersPromise == null) {
        this.fetchAnswersPromise = $.Deferred();
        this.questions = new Answers();
        if (this.id != null) {
          fetchMyAnswers = new StackMob.Collection.Query();
          fetchMyAnswers.equals('question', this.id);
          this.questions.query(fetchMyAnswers);
          this.questions.on('reset', function() {
            return _this.fetchAnswersPromise.resolve(_this.questions);
          });
        } else {
          this.fetchAnswersPromise.resolve(this.questions);
        }
      }
      return this.fetchAnswersPromise;
    };

    Question.prototype.getResults = function() {
      var promise,
        _this = this;
      promise = $.Deferred();
      $.when(this.getUserAnswers()).then(function(userAnswers) {
        var array, avg, contents, results, sum;
        contents = userAnswers.getContents();
        return promise.resolve((function() {
          switch (this.get('type')) {
            case '1':
              avg = contents.length === 0 ? 0 : (sum = _(contents).reduce((function(memo, element) {
                return memo + Number(element);
              }), 0), sum / contents.length);
              return avg * 20;
            case '4':
              return contents;
            case '3':
              results = {};
              _(this.getAnswerNames()).each(function(name, index) {
                return results[index] = {
                  name: name,
                  votes: 0
                };
              });
              _(contents).each(function(content) {
                return _(content).each(function(index) {
                  if (results[index]) {
                    return results[index].votes += 1;
                  }
                });
              });
              array = _(results).map(function(element) {
                return element;
              });
              return array;
            case '2':
              results = {};
              _(this.getAnswerNames()).each(function(name, index) {
                return results[index] = {
                  name: name,
                  votes: 0
                };
              });
              _(contents).each(function(index) {
                if (results[index]) {
                  return results[index].votes += 1;
                }
              });
              array = _(results).map(function(element) {
                return element;
              });
              return array;
            default:
              return null;
          }
        }).call(_this));
      });
      return promise;
    };

    Question.prototype.getAnswerNames = function() {
      try {
        return JSON.parse(this.get('answers'));
      } catch (error) {
        try {
          return this.get('answers').slice(1, -1).split(',');
        } catch (error) {
          return [];
        }
      }
    };

    Question.prototype.setAnswerNames = function(answersArray) {
      return this.set({
        answers: (function() {
          try {
            return JSON.stringify(answersArray);
          } catch (error) {
            try {
              return "[" + answersArray.join(",") + "]";
            } catch (error) {
              return "[]";
            }
          }
        })()
      });
    };

    return Question;

  })(StackMob.Model);

  Questions = (function(_super) {

    __extends(Questions, _super);

    Questions.name = 'Questions';

    function Questions() {
      return Questions.__super__.constructor.apply(this, arguments);
    }

    Questions.prototype.model = Question;

    Questions.prototype.types = {
      1: 'rate',
      2: 'checkbox',
      3: 'text',
      4: 'radio'
    };

    return Questions;

  })(StackMob.Collection);

  SurveyView = (function(_super) {

    __extends(SurveyView, _super);

    SurveyView.name = 'SurveyView';

    function SurveyView() {
      this.render = __bind(this.render, this);

      this.onSelect = __bind(this.onSelect, this);
      return SurveyView.__super__.constructor.apply(this, arguments);
    }

    SurveyView.prototype.template = "<div class=\"survey selectable span4 {{#if active}} active {{/if}}\">\n  <p class=\"date\">{{{ timeSwitch createddate }}}</p>\n  <p class=\"content\">\n    {{#if survey_id}}\n    {{else}}\n      {{#if active}}\n        <i class=\"icon-pencil icon-white\"></i>\n      {{else}}\n        <i class=\"icon-pencil\"></i>\n      {{/if}}\n    {{/if}}\n    {{ title }}\n  </p>\n</div>";

    SurveyView.prototype.events = {
      'click': 'select'
    };

    SurveyView.prototype.initialize = function() {
      var _this = this;
      this.model.on('change', this.render);
      return $.when(this.collection).then(function(collection) {
        return collection.on('show', _this.onSelect);
      });
    };

    SurveyView.prototype.onSelect = function() {
      return this.render();
    };

    SurveyView.prototype.select = function() {
      var _this = this;
      return $.when(this.collection).then(function(collection) {
        return collection.trigger('show', _this.model);
      });
    };

    SurveyView.prototype.render = function() {
      var _this = this;
      $.when(this.collection).then(function(collection) {
        var active;
        active = collection.active && ((_this.model.id && collection.active.id === _this.model.id) || (collection.active.cid === _this.model.cid));
        return _this.$el.html(_this.template.render(_.extend(_this.model.toJSON(), {
          active: active
        })));
      });
      return this;
    };

    return SurveyView;

  })(Backbone.View);

  QuestionEditView = (function(_super) {

    __extends(QuestionEditView, _super);

    QuestionEditView.name = 'QuestionEditView';

    function QuestionEditView() {
      this.save = __bind(this.save, this);

      this.destroy = __bind(this.destroy, this);

      this.onDestroy = __bind(this.onDestroy, this);

      this.onEdit = __bind(this.onEdit, this);
      return QuestionEditView.__super__.constructor.apply(this, arguments);
    }

    QuestionEditView.prototype.template = "<section class=\"editable {{#if isOpen}} active {{/if}}\">\n  \n  <div class=\"configurable show\">\n    <h3>\n      <i class=\"icon-{{icon}}\"></i>\n      {{ content }}\n    </h3>\n  </div>\n  <div class=\"row show\">\n    {{#checkAnswers}}\n      <div class=\"span4 item\">\n        <label class=\"checkbox\">\n          <input type=\"checkbox\" disabled=\"disabled\" />\n          {{ this }}\n        </label>\n      </div>\n    {{/checkAnswers}}\n    {{#radioAnswers}}\n      <div class=\"span4 item\">\n        <label class=\"radio\">\n          <input type=\"radio\" disabled=\"disabled\" />\n          {{ this }}\n        </label>\n      </div>\n    {{/radioAnswers}}\n  </div>\n  \n  <div class=\"add-section edit\">\n    <form action=\"\">\n      <input class=\"name add\" type=\"text\" autofocus=\"autofocus\" placeholder=\"Treść nowego pytania\" value=\"{{ content }}\"/>\n      <div class=\"form-actions toolbar\">\n        <div class=\"btn-group\" >\n          {{#types}}\n            <button class=\"btn {{#if active}} active {{/if}} type\" data-type=\"{{ type }}\">\n              <i class=\"icon-{{ icon }}\"></i>\n              {{ name }}\n            </button>\n          {{/types}}\n        </div>\n      </div>\n      <textarea rows=3 class=\"add answers\" placeholder=\"Jedna odpowiedź w jednej linijce\">{{ textAnswers }}</textarea>\n      <div class=\"form-actions\">\n        <button class=\"btn btn-large destroy-question\">\n          <i class=\"icon-remove\"></i>\n          Usuń pytanie\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary btn-large pull-right save\">\n          <i class=\"icon-pencil icon-white\"></i>\n          Zapisz pytanie\n        </button>\n      </div>\n    </form>\n  </div>\n</section>";

    QuestionEditView.prototype.events = {
      'click .show': 'edit',
      'click .type': 'setType',
      'click .type > i': 'typeIcon',
      'submit form': 'save',
      'click .destroy-question': 'destroy'
    };

    QuestionEditView.prototype.typeIcon = function(e) {
      e.target = $(e.target).parent()[0];
      return this.setType(e);
    };

    QuestionEditView.prototype.initialize = function() {
      this.isOpen = !this.model.get('content');
      this.model.collection.on('edit', this.onEdit);
      return this.model.on('destroy', this.onDestroy);
    };

    QuestionEditView.prototype.onEdit = function(model) {
      if (model === this.model) {
        return this.open();
      } else {
        this.persist();
        if (this.model.get('content').length > 0) {
          return this.save();
        } else {
          return this.model.destroy();
        }
      }
    };

    QuestionEditView.prototype.onDestroy = function() {
      return this.remove();
    };

    QuestionEditView.prototype.destroy = function(e) {
      e.preventDefault();
      this.model.collection.trigger('close');
      return this.model.destroy();
    };

    QuestionEditView.prototype.save = function(event) {
      if (event != null) {
        if (typeof event.preventDefault === "function") {
          event.preventDefault();
        }
      }
      this.persist();
      if (this.model.get('content').length > 0) {
        this.close();
        return this.model.collection.trigger('close');
      } else {
        return this.render();
      }
    };

    QuestionEditView.prototype.edit = function() {
      return this.model.collection.trigger('edit', this.model);
    };

    QuestionEditView.prototype.open = function() {
      this.isOpen = true;
      return this.render();
    };

    QuestionEditView.prototype.close = function(event) {
      if (event != null) {
        if (typeof event.preventDefault === "function") {
          event.preventDefault();
        }
      }
      this.isOpen = false;
      return this.render();
    };

    QuestionEditView.prototype.setType = function(e) {
      var type;
      e.preventDefault();
      type = $(e.target).data('type');
      if (!type) {
        return;
      }
      type = type.toString();
      this.model.set({
        type: type
      });
      this.persist();
      return this.render();
    };

    QuestionEditView.prototype.persist = function() {
      var answers, name;
      name = this.$('.name').val();
      answers = this.serializeAnswers(this.$('.answers').val().split("\n"));
      return this.model.set({
        content: name,
        answers: answers
      });
    };

    QuestionEditView.prototype.focus = function() {
      return this.$name.focus();
    };

    QuestionEditView.prototype.focusOnAnswers = function() {
      return this.$answers.focus();
    };

    QuestionEditView.prototype.icons = {
      '1': 'star',
      '2': 'hand-right',
      '3': 'check',
      '4': 'comment'
    };

    QuestionEditView.prototype.serializeAnswers = function(answersArray) {
      try {
        return JSON.stringify(answersArray);
      } catch (error) {
        try {
          return "[" + answersArray.join(",") + "]";
        } catch (error) {
          return "[]";
        }
      }
    };

    QuestionEditView.prototype.deserializeAnswers = function(answersSerialized) {
      try {
        return JSON.parse(answersSerialized);
      } catch (error) {
        try {
          return answersSerialized.slice(1, -1).split(',');
        } catch (error) {
          return [];
        }
      }
    };

    QuestionEditView.prototype.data = function() {
      var arrayAnswers, checkAnswers, radioAnswers, serializedAnswers, textAnswers, type, types;
      types = [
        {
          name: 'Ocena',
          type: '1',
          icon: this.icons['1']
        }, {
          name: '1 opcja',
          type: '2',
          icon: this.icons['2']
        }, {
          name: 'Wiele opcji',
          type: '3',
          icon: this.icons['3']
        }, {
          name: 'Komentarz',
          type: '4',
          icon: this.icons['4']
        }
      ];
      type = Number(this.model.get('type'));
      types[type - 1].active = true;
      serializedAnswers = this.model.get('answers');
      arrayAnswers = this.deserializeAnswers(serializedAnswers);
      textAnswers = arrayAnswers.join("\n");
      arrayAnswers = textAnswers.split("\n");
      radioAnswers = type === 2 ? arrayAnswers : void 0;
      checkAnswers = type === 3 ? arrayAnswers : void 0;
      return _.extend(this.model.toJSON(), {
        isOpen: this.isOpen,
        types: types,
        textAnswers: textAnswers,
        checkAnswers: checkAnswers,
        radioAnswers: radioAnswers,
        icon: this.icons[type]
      });
    };

    QuestionEditView.prototype.render = function() {
      var type;
      this.$el.html(this.template.render(this.data()));
      this.$name = this.$('.name');
      this.$answers = this.$('.answers');
      type = this.model.get('type');
      this.$answers.toggleClass('hidden', type !== "2" && type !== "3");
      this.$('.type').each(function() {
        return $(this).toggleClass('active', $(this).data('type').toString() === type);
      });
      if (type === "2" || type === "3") {
        this.focusOnAnswers();
      } else {
        this.focus();
      }
      return this;
    };

    return QuestionEditView;

  })(Backbone.View);

  QuestionView = (function(_super) {

    __extends(QuestionView, _super);

    QuestionView.name = 'QuestionView';

    function QuestionView() {
      this.template = __bind(this.template, this);
      return QuestionView.__super__.constructor.apply(this, arguments);
    }

    QuestionView.prototype.tagName = 'section';

    QuestionView.prototype.typeTemplates = {
      '1': function() {
        return "{{#results}}\n  <div class=\"span8 item\">\n    <div class=\"row-fluid\">\n      <div class=\"span10\">\n        <div class=\"progress\">\n          <div class=\"bar\" style=\"width: {{this}}%;\"></div>\n        </div>\n      </div>\n      <div class=\"span2\">\n        <span class=\"badge\">{{ this }} %</span>\n      </div>\n    </div>\n  </div>\n{{/results}}";
      },
      '2': function() {
        return "{{#results}}\n  <div class=\"span8 item\">\n    <label class=\"radio\">\n      <input type=\"radio\" disabled=\"disabled\" />\n      {{ name }}\n      <span class=\"badge\">{{ votes }}</span>\n    </label>\n  </div>\n{{/results}}";
      },
      '3': function() {
        return "{{#results}}\n  <div class=\"span8 item\">\n    <label class=\"checkbox\">\n      <input type=\"checkbox\" disabled=\"disabled\" />\n      {{ name }}\n      <span class=\"badge\">{{ votes }}</span>\n    </label>\n  </div>\n{{/results}}";
      },
      '4': function() {
        return "{{#results}}\n  <div class=\"span8 item\">\n    {{ this }}\n  </div>\n{{/results}}";
      }
    };

    QuestionView.prototype.template = function() {
      return "<div class=\"item\">\n  <h3>\n    <i class=\"icon-{{icon}}\"></i>\n    {{ content }}\n  </h3>\n</div>\n<div class=\"row\">\n  " + (this.typeTemplates[this.model.get('type')]()) + "\n</div>";
    };

    QuestionView.prototype.icons = {
      '1': 'star',
      '2': 'hand-right',
      '3': 'check',
      '4': 'comment'
    };

    QuestionView.prototype.serializeAnswers = function(answersArray) {
      try {
        return JSON.stringify(answersArray);
      } catch (error) {
        try {
          return "[" + answersArray.join(",") + "]";
        } catch (error) {
          return "[]";
        }
      }
    };

    QuestionView.prototype.deserializeAnswers = function(answersSerialized) {
      try {
        return JSON.parse(answersSerialized);
      } catch (error) {
        try {
          return answersSerialized.slice(1, -1).split(',');
        } catch (error) {
          return [];
        }
      }
    };

    QuestionView.prototype.data = function() {
      var arrayAnswers, checkAnswers, radioAnswers, serializedAnswers, textAnswers, type, types;
      types = [
        {
          name: 'Ocena',
          type: '1',
          icon: this.icons['1']
        }, {
          name: 'Decyzja',
          type: '2',
          icon: this.icons['2']
        }, {
          name: 'Wiele opcji',
          type: '3',
          icon: this.icons['3']
        }, {
          name: 'Komentarz',
          type: '4',
          icon: this.icons['4']
        }
      ];
      type = Number(this.model.get('type'));
      types[type - 1].active = true;
      serializedAnswers = this.model.get('answers');
      arrayAnswers = this.deserializeAnswers(serializedAnswers);
      textAnswers = arrayAnswers.join("\n");
      radioAnswers = type === 2 ? arrayAnswers : void 0;
      checkAnswers = type === 3 ? arrayAnswers : void 0;
      return _.extend(this.model.toJSON(), {
        types: types,
        textAnswers: textAnswers,
        checkAnswers: checkAnswers,
        radioAnswers: radioAnswers,
        icon: this.icons[type]
      });
    };

    QuestionView.prototype.render = function() {
      var _this = this;
      this.$el.html("<div class=\"loading\"><img src=\"/img/progress.gif\"/></div>");
      $.when(this.model.getResults()).then(function(results) {
        var data;
        data = _.extend(_this.data(), {
          results: results
        });
        return _this.$el.html(_this.template().render(data));
      });
      return this;
    };

    return QuestionView;

  })(Backbone.View);

  SurveyShowView = (function(_super) {

    __extends(SurveyShowView, _super);

    SurveyShowView.name = 'SurveyShowView';

    function SurveyShowView() {
      return SurveyShowView.__super__.constructor.apply(this, arguments);
    }

    SurveyShowView.prototype.template = "<div id=\"title-show\" class=\"category\">\n  <h1 id=\"title\">{{ title }}</h1>\n</div>\n<div id=\"questions\">\n</div>";

    SurveyShowView.prototype.itemView = QuestionView;

    SurveyShowView.prototype.initialize = function() {
      this.collection = this.model.getQuestions();
      $.when(this.collection).then(function(collection) {});
      return SurveyShowView.__super__.initialize.apply(this, arguments);
    };

    SurveyShowView.prototype.render = function() {
      this.$el.html(this.template.render(this.model.toJSON()));
      this.$collection = this.$('#questions');
      SurveyShowView.__super__.render.apply(this, arguments);
      return this;
    };

    return SurveyShowView;

  })(CollectionView);

  SurveyEditView = (function(_super) {

    __extends(SurveyEditView, _super);

    SurveyEditView.name = 'SurveyEditView';

    function SurveyEditView() {
      this.closeTitle = __bind(this.closeTitle, this);

      this.onClose = __bind(this.onClose, this);

      this.onEdit = __bind(this.onEdit, this);

      this.createQuestion = __bind(this.createQuestion, this);

      this.destroy = __bind(this.destroy, this);

      this.publish = __bind(this.publish, this);

      this.onSync = __bind(this.onSync, this);

      this.onSetTitle = __bind(this.onSetTitle, this);
      return SurveyEditView.__super__.constructor.apply(this, arguments);
    }

    SurveyEditView.prototype.template = "<div class=\"editable\" id=\"title-section\">\n  <div class=\"add-section edit\">\n    <form id=\"title-edit\" action=\"\">\n      <input id=\"title-input\" type=\"text\" class=\"add edit\" placeholder=\"Tytuł nowej ankiety\" autofocus=\"autofocus\" value=\"{{ title }}\"/>\n      <div class=\"form-actions\">\n        <button type=\"submit\" id=\"title-submit\" class=\"btn btn-primary btn-large pull-right\">\n          <i class=\"icon-pencil icon-white\"></i>\n          Zapisz tytuł\n        </button>\n      </div>\n    </form>\n  </div>\n\n  <div id=\"title-show\" class=\"category show\">\n    <h1 id=\"title\">{{ title }}</h1>\n  </div>\n</div>\n<div id=\"questions\">\n</div>\n<section class=\"top-level-action-block\">\n  <div>\n    <div class=\"add-section \">\n      <input type=\"text\" class=\"new-question-button add top-level-actions\" placeholder=\"Treść nowego pytania\"/>\n    </div>\n  </div>\n</section>\n<div class=\"form-actions section\">\n  <button class=\"destroy btn btn-large\">\n    <i class=\"icon-remove\"></i>\n    Usuń ankietę\n  </button>\n  \n  <button id=\"survey-submit\" data-toggle=\"button\" class=\"btn btn-large btn-primary pull-right top-level-actions\">\n    <i class=\"icon-ok icon-white\"></i>\n    Opublikuj ankietę\n  </button>\n  \n</div>";

    SurveyEditView.prototype.itemView = QuestionEditView;

    SurveyEditView.prototype.initialize = function() {
      var _this = this;
      this.surveys = window.app.Surveys;
      this.collection = this.model.getQuestions();
      this.model.on('change:title', this.onSetTitle);
      this.model.on('sync', this.onSync);
      $.when(this.collection).then(function(collection) {
        collection.on('edit', _this.onEdit);
        return collection.on('close', _this.onClose);
      });
      return SurveyEditView.__super__.initialize.apply(this, arguments);
    };

    SurveyEditView.prototype.events = {
      'click .new-question-button': 'createQuestion',
      'submit #title-edit': 'closeTitle',
      'click #title-show': 'openTitle',
      'click .destroy': 'destroy',
      'click #survey-submit': 'publish'
    };

    SurveyEditView.prototype.onSetTitle = function() {
      var collection;
      collection = window.app.Surveys;
      if (!collection.include(this.model)) {
        return collection.add(this.model);
      }
    };

    SurveyEditView.prototype.onSync = function() {
      return window.app.Surveys.trigger('publish', this.model);
    };

    SurveyEditView.prototype.publish = function(e) {
      var button;
      if (e != null) {
        e.preventDefault();
      }
      this.model.save();
      button = this.$('#survey-submit');
      return this.$('#survey-submit').addClass('disabled');
    };

    SurveyEditView.prototype.destroy = function(e) {
      var _this = this;
      e.preventDefault();
      this.model.destroy();
      return $.when(this.collection).then(function(collection) {
        collection.remove(_this.model);
        return app.navigate('/surveys', true);
      });
    };

    SurveyEditView.prototype.createQuestion = function() {
      var question,
        _this = this;
      question = new Question();
      return $.when(this.collection).then(function(collection) {
        collection.add(question);
        return collection.trigger('edit', question);
      });
    };

    SurveyEditView.prototype.onEdit = function(model) {
      if (model === this.model) {

      } else {
        this.closeTitle();
      }
      this.$('.top-level-action-block').addClass('hidden');
      return this.$('.top-level-actions').attr('disabled', 'disabled');
    };

    SurveyEditView.prototype.onClose = function() {
      this.$('.top-level-action-block').removeClass('hidden');
      return this.$('.top-level-actions').attr('disabled', false);
    };

    SurveyEditView.prototype.closeTitle = function(e) {
      var previousTitle, title,
        _this = this;
      if (e != null) {
        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
      }
      previousTitle = this.model.get('title');
      title = this.$titleInput.val();
      if (title.length === 0) {
        return this.openTitle();
      } else {
        this.model.set({
          title: title
        });
        this.$title.html(title);
        this.$titleSection.removeClass('active');
        return $.when(this.collection).then(function(collection) {
          return collection.trigger('close');
        });
      }
    };

    SurveyEditView.prototype.openTitle = function() {
      var _this = this;
      this.$titleSection.addClass('active');
      this.$titleInput.focus();
      return $.when(this.collection).then(function(collection) {
        return collection.trigger('edit', _this.model);
      });
    };

    SurveyEditView.prototype.updateState = function() {
      var title;
      title = this.model.get('title');
      if (!title) {
        return this.openTitle();
      }
    };

    SurveyEditView.prototype.render = function() {
      this.$el.html(this.template.render(this.model.toJSON()));
      this.$collection = this.$('#questions');
      this.$newQuestionInput = this.$('#new-question');
      this.$submit = this.$('#survey-submit');
      this.$titleSection = this.$('#title-section');
      this.$title = this.$('#title');
      this.$titleInput = this.$('#title-input');
      this.$titleEdit = this.$('#title-edit');
      this.$titleShow = this.$('#title-show');
      this.$titleSubmit = this.$('#title-submit');
      this.updateState();
      SurveyEditView.__super__.render.apply(this, arguments);
      return this;
    };

    return SurveyEditView;

  })(CollectionView);

  InformationElement = (function(_super) {

    __extends(InformationElement, _super);

    InformationElement.name = 'InformationElement';

    function InformationElement() {
      return InformationElement.__super__.constructor.apply(this, arguments);
    }

    InformationElement.prototype.schemaName = 'information_element';

    InformationElement.prototype.initialize = function() {
      this.isOpen = !this.id;
      return InformationElement.__super__.initialize.apply(this, arguments);
    };

    InformationElement.prototype.defaults = {
      type: 'text'
    };

    InformationElement.prototype.parse = function(data) {
      if (typeof data === 'object') {
        return data;
      } else {
        return InformationElement.__super__.parse.apply(this, arguments);
      }
    };

    return InformationElement;

  })(ModelWithImage);

  InformationElements = (function(_super) {

    __extends(InformationElements, _super);

    InformationElements.name = 'InformationElements';

    function InformationElements() {
      return InformationElements.__super__.constructor.apply(this, arguments);
    }

    InformationElements.prototype.model = InformationElement;

    return InformationElements;

  })(SortableCollection);

  InformationGroup = (function(_super) {

    __extends(InformationGroup, _super);

    InformationGroup.name = 'InformationGroup';

    function InformationGroup() {
      this.saveInformations = __bind(this.saveInformations, this);
      return InformationGroup.__super__.constructor.apply(this, arguments);
    }

    InformationGroup.prototype.schemaName = 'information_group';

    InformationGroup.prototype.collectionClass = InformationElements;

    InformationGroup.prototype.saveInformations = function() {
      var _this = this;
      return this.informations.each(function(model) {
        return model.save({
          survey: _this.id
        });
      });
    };

    InformationGroup.prototype.getInformations = function() {
      var fetchMyElements,
        _this = this;
      if (this.fetchElementsPromise == null) {
        this.fetchElementsPromise = $.Deferred();
        this.informations = new this.collectionClass();
        if (this.id != null) {
          fetchMyElements = new StackMob.Collection.Query();
          fetchMyElements.equals(this.schemaName, this.id);
          this.informations.query(fetchMyElements);
          this.informations.on('all', function(event) {});
          this.informations.on('reset', function() {
            return _this.fetchElementsPromise.resolve(_this.informations);
          });
        } else {
          this.fetchElementsPromise.resolve(this.informations);
        }
      }
      return this.fetchElementsPromise;
    };

    return InformationGroup;

  })(StackMob.Model);

  InformationGroups = (function(_super) {

    __extends(InformationGroups, _super);

    InformationGroups.name = 'InformationGroups';

    function InformationGroups() {
      return InformationGroups.__super__.constructor.apply(this, arguments);
    }

    InformationGroups.prototype.model = InformationGroup;

    return InformationGroups;

  })(SortableCollection);

  InformationGroupView = (function(_super) {

    __extends(InformationGroupView, _super);

    InformationGroupView.name = 'InformationGroupView';

    function InformationGroupView() {
      return InformationGroupView.__super__.constructor.apply(this, arguments);
    }

    return InformationGroupView;

  })(SelectableView);

  ElementView = (function(_super) {

    __extends(ElementView, _super);

    ElementView.name = 'ElementView';

    function ElementView() {
      return ElementView.__super__.constructor.apply(this, arguments);
    }

    ElementView.prototype.events = function() {
      return {
        'click .show': 'open',
        'click .save-button': 'save',
        'submit': 'save',
        'click .destroy-button': 'destroy',
        'click .up-button': 'up',
        'click .down-button': 'down'
      };
    };

    ElementView.prototype.up = function(event) {
      var myPosition, sortedAbove, swapWith,
        _this = this;
      event.preventDefault();
      sortedAbove = _(this.model.collection.filter(function(model) {
        return model.get('position') < _this.model.get('position');
      })).sortBy(function(m) {
        return m.get('position');
      });
      if (sortedAbove.length > 0) {
        swapWith = _(sortedAbove).last();
        myPosition = this.model.get('position');
        this.model.set({
          position: swapWith.get('position')
        });
        swapWith.set({
          position: myPosition
        });
        this.model.collection.sort();
        this.model.save({}, {
          wait: true
        });
        return swapWith.save({}, {
          wait: true
        });
      }
    };

    ElementView.prototype.down = function(event) {
      var myPosition, sortedAbove, swapWith,
        _this = this;
      event.preventDefault();
      sortedAbove = _(this.model.collection.filter(function(model) {
        return model.get('position') > _this.model.get('position');
      })).sortBy(function(m) {
        return m.get('position');
      });
      if (sortedAbove.length > 0) {
        swapWith = _(sortedAbove).first();
        myPosition = this.model.get('position');
        this.model.set({
          position: swapWith.get('position')
        });
        swapWith.set({
          position: myPosition
        });
        this.model.collection.sort();
        this.model.save({}, {
          wait: true
        });
        return swapWith.save({}, {
          wait: true
        });
      }
    };

    ElementView.prototype.initialize = function() {
      this.model.on('sync', this.onSync, this);
      return this.model.on('change', this.render, this);
    };

    ElementView.prototype.open = function() {
      this.model.isOpen = true;
      return this.render();
    };

    ElementView.prototype.persist = function() {
      var type;
      type = this.model.get('type');
      if (type === "text") {
        this.model.set({
          text: this.$(".text-input").val()
        });
      } else if (type === "title") {
        this.model.set({
          title: this.$(".title-input").val()
        });
      }
      return this.model.save({}, {
        wait: true
      });
    };

    ElementView.prototype.save = function(event) {
      event.preventDefault();
      this.persist();
      return this.close();
    };

    ElementView.prototype.destroy = function(event) {
      var _ref, _ref1;
      event.preventDefault();
      if ((_ref = this.model.collection) != null) {
        _ref.sort();
      }
      if ((_ref1 = this.model.collection) != null) {
        _ref1.remove(this.model);
      }
      return this.model.save({
        is_deleted: true
      });
    };

    ElementView.prototype.onSync = function() {
      var _ref;
      if (this.model.get('is_deleted') === true) {
        if ((_ref = this.model.collection) != null) {
          _ref.remove(this.model);
        }
        return this.remove();
      } else {
        return this.render();
      }
    };

    ElementView.prototype.close = function() {
      this.model.isOpen = false;
      return this.render();
    };

    ElementView.prototype.render = function() {
      var data;
      data = this.model.templateData != null ? this.model.templateData() : this.model.toJSON();
      this.$el.html(this.template().render(_.extend(data, {
        isOpen: this.model.isOpen,
        hasChanged: this.model.changedAttributes()
      })));
      return this;
    };

    return ElementView;

  })(View);

  InformationElementView = (function(_super) {

    __extends(InformationElementView, _super);

    InformationElementView.name = 'InformationElementView';

    function InformationElementView() {
      return InformationElementView.__super__.constructor.apply(this, arguments);
    }

    InformationElementView.prototype.modelId = 'information_element_id';

    InformationElementView.prototype.templateShow = {
      text: function() {
        return "<p>{{ text }}</p>";
      },
      title: function() {
        return "<h3>{{ title }}</h3>";
      },
      image: function() {
        return "<img src=\"{{ image_url }}\" />";
      }
    };

    InformationElementView.prototype.templateEdit = {
      text: function() {
        return "<textarea class=\"text-input add\" type=\"text\" rows=\"5\" autofocus=\"autofocus\" placeholder=\"Treść nowego akapitu\">{{ text }}</textarea>";
      },
      title: function() {
        return "<input class=\"title-input add\" type=\"text\" autofocus=\"autofocus\" placeholder=\"Treść nowego tytułu\" value=\"{{ title }}\" />";
      },
      image: function() {
        return "<p><img class=\"image-preview\" src=\"{{ image_url }}\"/></p>\n<p><input type=\"file\" class=\"image-input\" name=\"image\" /></p>";
      }
    };

    InformationElementView.prototype.template = function() {
      var template;
      return "<section class=\"editable sortable {{#if isOpen}} active {{/if}} {{#if hasChanged}} waiting {{/if}}\" data-sortable-id=\"{{" + this.modelId + "}}\">\n  <div class=\"configurable show\">\n    " + ((template = this.templateShow[this.model.get('type')]) ? template() : void 0) + "\n  </div>\n  <div class=\"add-section edit\">\n    <form class=\"edit-form\" action=\"\">\n      " + ((template = this.templateEdit[this.model.get('type')]) ? template() : void 0) + "\n      <div class=\"form-actions\">\n        <div class=\"btn-toolbar pull-right\">\n\n          <!--<div class=\"btn-group\">\n            \n            <button class=\"up-button btn btn-large\">\n              <i class=\"icon-arrow-up\"></i>\n            </button>\n            <button class=\"down-button btn btn-large\">\n              <i class=\"icon-arrow-down\"></i>\n            </button>\n            \n          </div>-->\n\n          <div class=\"btn-group\">\n            <button type=\"submit\" class=\"save-button btn btn-primary btn-large\">\n              <i class=\"icon-pencil icon-white\"></i>\n              Zapisz element\n            </button>\n          </div>\n        </div>\n\n        <button class=\"destroy-button btn btn-large\">\n          <i class=\"icon-remove\"></i>\n          Usuń element\n        </button>\n\n      </div>\n    </form>\n  </div>\n</section>";
    };

    InformationElementView.prototype.events = function() {
      return _.extend(InformationElementView.__super__.events.apply(this, arguments), {
        'change .image-input': 'onImageChange'
      });
    };

    InformationElementView.prototype.open = function() {
      InformationElementView.__super__.open.apply(this, arguments);
      if (this.model.get('type') === 'image') {
        return this.$('input[type=file]').click();
      }
    };

    return InformationElementView;

  })(ElementView);

  SortableCollectionView = (function(_super) {

    __extends(SortableCollectionView, _super);

    SortableCollectionView.name = 'SortableCollectionView';

    function SortableCollectionView() {
      this.sort = __bind(this.sort, this);
      return SortableCollectionView.__super__.constructor.apply(this, arguments);
    }

    SortableCollectionView.prototype.className = 'sortable-ui';

    SortableCollectionView.prototype.events = function() {
      return {
        'sortstop': 'sort'
      };
    };

    SortableCollectionView.prototype.afterSort = function(collection) {};

    SortableCollectionView.prototype.sort = function(event) {
      var _this = this;
      return $.when(this.collection).then(function(collection) {
        _this.$('.sortable').each(function(index, element) {
          var id, model;
          id = $(element).data('sortable-id');
          if (model = collection.get(id)) {
            if (model.get('position') !== index) {
              model.set({
                position: index
              });
              return model.save();
            }
          }
        });
        return _this.afterSort(collection);
      });
    };

    SortableCollectionView.prototype.render = function() {
      SortableCollectionView.__super__.render.apply(this, arguments);
      this.$collection.sortable({});
      this.$collection.disableSelection();
      return this;
    };

    return SortableCollectionView;

  })(CollectionView);

  MenuCollectionView = (function(_super) {

    __extends(MenuCollectionView, _super);

    MenuCollectionView.name = 'MenuCollectionView';

    function MenuCollectionView() {
      return MenuCollectionView.__super__.constructor.apply(this, arguments);
    }

    MenuCollectionView.prototype.afterSort = function(collection) {
      return collection.sort();
    };

    return MenuCollectionView;

  })(SortableCollectionView);

  GroupShowView = (function(_super) {

    __extends(GroupShowView, _super);

    GroupShowView.name = 'GroupShowView';

    function GroupShowView() {
      return GroupShowView.__super__.constructor.apply(this, arguments);
    }

    GroupShowView.prototype.titlePlaceholder = 'Tytuł nowego działu';

    GroupShowView.prototype.labelAttribute = 'name';

    GroupShowView.prototype.itemView = InformationElementView;

    GroupShowView.prototype.initialize = function() {
      this.collection = this.model.getInformations();
      return GroupShowView.__super__.initialize.apply(this, arguments);
    };

    GroupShowView.prototype.actionsButtonGroupTemplate = function() {
      return "";
    };

    GroupShowView.prototype.events = function() {
      return _.extend(GroupShowView.__super__.events.apply(this, arguments), {
        'click #information-submit': 'save',
        'click .destroy': 'destroy'
      });
    };

    GroupShowView.prototype.persist = function() {
      return this.model.set({
        name: this.$('#title-input').val()
      });
    };

    GroupShowView.prototype.save = function() {
      this.persist();
      return this.model.save();
    };

    GroupShowView.prototype.destroy = function() {
      var _ref;
      this.model.save({
        is_deleted: true
      });
      this.model.collection.sort();
      if ((_ref = this.model.collection) != null) {
        _ref.remove(this.model);
      }
      return app.navigate(this.navigateToAfterDelete, true);
    };

    GroupShowView.prototype.template = function() {
      return "<div class=\"editable active\" id=\"title-section\">\n  <div class=\"add-section edit\">\n    <form id=\"title-edit\" action=\"\">\n      <input id=\"title-input\" type=\"text\" class=\"input-title add edit\" placeholder=\"" + this.titlePlaceholder + "\" autofocus=\"autofocus\" value=\"{{ " + this.labelAttribute + " }}\"/>\n    </form>\n  </div>\n\n  <div id=\"title-show\" class=\"category show\">\n    <h1 id=\"title\">{{#if " + this.labelAttribute + " }}{{ " + this.labelAttribute + " }}{{else}}Nowa kategoria{{/if}}</h1>\n  </div>\n</div>\n\n<div id=\"elements\"></div>\n\n<div class=\"form-actions section\">\n\n  <div class=\"btn-toolbar pull-right\">\n\n    " + (this.actionsButtonGroupTemplate()) + "\n\n    <div class=\"btn-group\">\n      <button id=\"information-submit\" class=\"btn btn-large btn-primary top-level-actions\">\n        <i class=\"icon-ok icon-white\"></i>\n        Zapisz\n      </button>\n    </div>\n  </div>\n\n  <button class=\"destroy btn btn-large\">\n    <i class=\"icon-remove\"></i>\n    Usuń\n  </button>\n</div>";
    };

    GroupShowView.prototype.render = function() {
      this.$el.html(this.template().render(this.model.toJSON()));
      this.$collection = this.$('#elements');
      this.$("[rel='tooltip']").tooltip({
        animation: false
      });
      return GroupShowView.__super__.render.apply(this, arguments);
    };

    return GroupShowView;

  })(SortableCollectionView);

  InformationGroupShowView = (function(_super) {

    __extends(InformationGroupShowView, _super);

    InformationGroupShowView.name = 'InformationGroupShowView';

    function InformationGroupShowView() {
      return InformationGroupShowView.__super__.constructor.apply(this, arguments);
    }

    InformationGroupShowView.prototype.navigateToAfterDelete = 'informations';

    InformationGroupShowView.prototype.events = function() {
      return _.extend(InformationGroupShowView.__super__.events.apply(this, arguments), {
        'click .create-text': this.createElement('text'),
        'click .create-title': this.createElement('title'),
        'click .create-image': this.createElement('image')
      });
    };

    InformationGroupShowView.prototype.createElement = function(type) {
      var _this = this;
      return function(event) {
        event.preventDefault();
        return $.when(_this.model.getInformations()).then(function(informations) {
          return informations.add({
            type: type,
            position: informations.newPosition(),
            information_group: _this.model.id
          });
        });
      };
    };

    InformationGroupShowView.prototype.actionsButtonGroupTemplate = function() {
      return "<div class=\"btn-group\">\n  \n  <button class=\"create-title btn btn-large\" rel=\"tooltip\" title=\"Dodaj tytuł\">\n    <i class=\"icon-bookmark\"></i>\n  </button>\n  \n  <button class=\"create-text btn btn-large\" rel=\"tooltip\" title=\"Dodaj tekst\">\n    <i class=\"icon-align-left\"></i>\n  </button>\n  \n  <button class=\"create-image btn btn-large\" rel=\"tooltip\" title=\"Dodaj obrazek\">\n    <i class=\"icon-picture\"></i>\n  </button>\n  \n</div>";
    };

    return InformationGroupShowView;

  })(GroupShowView);

  ContactElement = (function(_super) {

    __extends(ContactElement, _super);

    ContactElement.name = 'ContactElement';

    function ContactElement() {
      return ContactElement.__super__.constructor.apply(this, arguments);
    }

    ContactElement.prototype.schemaName = 'contact_element';

    ContactElement.prototype.parse = function(data) {
      if (typeof data === 'object') {
        return data;
      } else {
        return ContactElement.__super__.parse.apply(this, arguments);
      }
    };

    ContactElement.types = [
      {
        name: 'header',
        id: "200",
        icon: 'bookmark',
        add: 'nagłówek'
      }, {
        name: 'person',
        id: "100",
        icon: 'user',
        add: 'osobę'
      }, {
        name: 'address',
        id: "4",
        icon: 'home',
        add: 'adres'
      }, {
        name: 'phone',
        id: "1",
        icon: 'headphones',
        add: 'telefon'
      }, {
        name: 'email',
        id: "2",
        icon: 'envelope',
        add: 'email'
      }, {
        name: 'url',
        id: "3",
        icon: 'globe',
        add: 'stronę www'
      }, {
        name: 'text',
        id: "5",
        icon: 'pencil',
        add: 'własną etykietę'
      }
    ];

    ContactElement.prototype.setDefaultKey = function() {
      if (!this.has('key')) {
        return this.set({
          key: (function() {
            switch (this.get('type')) {
              case "1":
                return 'telefon';
              case "2":
                return 'email';
              case "3":
                return 'www';
              case "4":
                return 'adres';
              case "5":
                return 'etykieta';
              default:
                return;
            }
          }).call(this)
        });
      }
    };

    ContactElement.prototype.initialize = function() {
      this.isOpen = !this.id;
      this.setDefaultKey();
      return ContactElement.__super__.initialize.apply(this, arguments);
    };

    return ContactElement;

  })(StackMob.Model);

  ContactElements = (function(_super) {

    __extends(ContactElements, _super);

    ContactElements.name = 'ContactElements';

    function ContactElements() {
      return ContactElements.__super__.constructor.apply(this, arguments);
    }

    ContactElements.prototype.model = ContactElement;

    return ContactElements;

  })(InformationElements);

  ContactGroup = (function(_super) {

    __extends(ContactGroup, _super);

    ContactGroup.name = 'ContactGroup';

    function ContactGroup() {
      return ContactGroup.__super__.constructor.apply(this, arguments);
    }

    ContactGroup.prototype.schemaName = 'contact_group';

    ContactGroup.prototype.collectionClass = ContactElements;

    return ContactGroup;

  })(InformationGroup);

  ContactGroups = (function(_super) {

    __extends(ContactGroups, _super);

    ContactGroups.name = 'ContactGroups';

    function ContactGroups() {
      return ContactGroups.__super__.constructor.apply(this, arguments);
    }

    ContactGroups.prototype.model = ContactGroup;

    ContactGroups.prototype.comparator = function(model) {
      return model.get('location');
    };

    return ContactGroups;

  })(SortableCollection);

  ContactGroupView = (function(_super) {

    __extends(ContactGroupView, _super);

    ContactGroupView.name = 'ContactGroupView';

    function ContactGroupView() {
      return ContactGroupView.__super__.constructor.apply(this, arguments);
    }

    return ContactGroupView;

  })(InformationGroupView);

  ContactElementView = (function(_super) {
    var templateEditWithKey, templateEditWithoutKey;

    __extends(ContactElementView, _super);

    ContactElementView.name = 'ContactElementView';

    function ContactElementView() {
      return ContactElementView.__super__.constructor.apply(this, arguments);
    }

    ContactElementView.prototype.modelId = 'contact_element_id';

    ContactElementView.prototype.types = {
      "200": 'header1',
      "100": 'person',
      "5": 'text',
      "4": 'address',
      "3": 'url',
      "2": 'email',
      "1": 'phone'
    };

    ContactElementView.prototype.templateShow = {
      "200": function() {
        return "<h3>{{ value }}";
      },
      "100": function() {
        return "<h4><i class=\"icon-user\"></i> {{ value }}</h4>";
      },
      "5": function() {
        return "<p><span class=\"info-label\"><i class=\"icon-pencil\"></i> {{ key }}</span> {{ value }}</p>";
      },
      "4": function() {
        return "<p><span class=\"info-label\"><i class=\"icon-home\"></i> {{ key }}</span> {{ value }}</p>";
      },
      "3": function() {
        return "<p><span class=\"info-label\"><i class=\"icon-globe\"></i> {{ key }}</span> <a href=\"http://{{ value }}\">{{ value }}</a></p>";
      },
      "2": function() {
        return "<p><span class=\"info-label\"><i class=\"icon-envelope\"></i> {{ key }}</span> <a href=\"mailto:{{ value }}\">{{ value }}</a></p>";
      },
      "1": function() {
        return "<p><span class=\"info-label\"><i class=\"icon-headphones\"></i> {{ key }}</span> {{ value }}</p>";
      }
    };

    templateEditWithKey = function(placeholder) {
      return function() {
        return "<div class=\"row-fluid\">\n  <div class=\"span2\">\n    <input class=\"key add\" type=\"text\" placeholder=\"" + placeholder + "\" value=\"{{ key }}\"/>\n  </div>\n  <div class=\"span10\">\n    <input class=\"value add\" type=\"text\" autofocus=\"autofocus\" placeholder=\"\" value=\"{{ value }}\"/>\n  </div>\n</div>";
      };
    };

    templateEditWithoutKey = function(placeholder) {
      return function() {
        return "<input class=\"value add\" type=\"text\" autofocus=\"autofocus\" placeholder=\"" + placeholder + "\" value=\"{{ value }}\"/>";
      };
    };

    ContactElementView.prototype.templateEdit = {
      "1": templateEditWithKey('telefon'),
      "2": templateEditWithKey('email'),
      "3": templateEditWithKey('www'),
      "4": templateEditWithKey('adres'),
      "5": function() {
        return "<div class=\"row-fluid\">\n  <div class=\"span2\">\n    <input class=\"key add\" type=\"text\" autofocus=\"autofocus\" placeholder=\"etykieta\" value=\"{{ key }}\"/>\n  </div>\n  <div class=\"span10\">\n    <input class=\"value add\" type=\"text\" placeholder=\"\" value=\"{{ value }}\"/>\n  </div>\n</div>";
      },
      "100": templateEditWithoutKey('Nazwa osoby lub jednostki'),
      "200": templateEditWithoutKey('Nazwa działu')
    };

    ContactElementView.prototype.persist = function() {
      this.model.set({
        key: this.$('.key').val(),
        value: this.$('.value').val()
      });
      return this.model.save();
    };

    return ContactElementView;

  })(InformationElementView);

  ContactGroupShowView = (function(_super) {

    __extends(ContactGroupShowView, _super);

    ContactGroupShowView.name = 'ContactGroupShowView';

    function ContactGroupShowView() {
      this.events = __bind(this.events, this);
      return ContactGroupShowView.__super__.constructor.apply(this, arguments);
    }

    ContactGroupShowView.prototype.titlePlaceholder = 'Tytuł nowego działu';

    ContactGroupShowView.prototype.labelAttribute = 'name';

    ContactGroupShowView.prototype.navigateToAfterDelete = 'contact';

    ContactGroupShowView.prototype.itemView = ContactElementView;

    ContactGroupShowView.prototype.creationEvents = function() {
      var events,
        _this = this;
      events = {};
      _(ContactElement.types).each(function(type) {
        return events["click .create-" + type.name] = function(event) {
          event.preventDefault();
          return $.when(_this.model.getInformations()).then(function(informations) {
            var newPosition;
            newPosition = informations.newPosition();
            return informations.create({
              type: type.id,
              position: newPosition,
              contact_group: _this.model.id
            });
          });
        };
      });
      return events;
    };

    ContactGroupShowView.prototype.events = function() {
      return _.extend(ContactGroupShowView.__super__.events.apply(this, arguments), this.creationEvents());
    };

    ContactGroupShowView.prototype.actionsButtonGroupTemplate = function() {
      return "<div class=\"btn-group\">\n  \n  {{#types}}\n    <button class=\"create-{{name}} btn btn-large\" rel=\"tooltip\" title=\"Dodaj {{add}}\">\n      <i class=\"icon-{{icon}}\"></i>\n    </button>\n  {{/types}}\n\n  <!--\n  <button class=\"btn btn-large dropdown-toggle\" data-toggle=\"dropdown\">\n    <div class=\"caret\"></div>\n  </button>\n  <ul class=\"dropdown-menu\">\n    {{#types}}\n      <li>\n        <a class=\"create-{{name}}\" href=\"#\"><i class=\"icon-{{icon}}\"></i> Dodaj {{add}}</a>\n      </li>\n    {{/types}}\n  </ul>\n  -->\n  \n</div>".render({
        types: ContactElement.types
      });
    };

    return ContactGroupShowView;

  })(GroupShowView);

  Place = (function(_super) {

    __extends(Place, _super);

    Place.name = 'Place';

    function Place() {
      return Place.__super__.constructor.apply(this, arguments);
    }

    Place.prototype.schemaName = 'location';

    return Place;

  })(StackMob.Model);

  Places = (function(_super) {

    __extends(Places, _super);

    Places.name = 'Places';

    function Places() {
      return Places.__super__.constructor.apply(this, arguments);
    }

    Places.prototype.model = Place;

    Places.prototype.parse = function(response) {
      return _(response).reject(function(model) {
        return model.is_deleted;
      });
    };

    return Places;

  })(LoadableCollection);

  PlaceView = (function(_super) {

    __extends(PlaceView, _super);

    PlaceView.name = 'PlaceView';

    function PlaceView() {
      return PlaceView.__super__.constructor.apply(this, arguments);
    }

    return PlaceView;

  })(SelectableView);

  PlaceShowView = (function(_super) {

    __extends(PlaceShowView, _super);

    PlaceShowView.name = 'PlaceShowView';

    function PlaceShowView() {
      this.render = __bind(this.render, this);

      this.destroy = __bind(this.destroy, this);

      this.save = __bind(this.save, this);
      return PlaceShowView.__super__.constructor.apply(this, arguments);
    }

    PlaceShowView.prototype.labelAttribute = 'name';

    PlaceShowView.prototype.titlePlaceholder = 'Nazwa nowego miejsca';

    PlaceShowView.prototype.template = function() {
      return "<div id=\"title-section\">\n  <div class=\"add-section\">\n    <form id=\"title-edit\" action=\"\">\n      <input type=\"text\" class=\"input-title add edit\" placeholder=\"" + this.titlePlaceholder + "\" autofocus=\"autofocus\" value=\"{{ " + this.labelAttribute + " }}\"/>\n    </form>\n  </div>\n</div>\n\n<div id=\"elements\">\n</div>\n\n<section class=\"item\">\n  <form action=\"#\" class=\"form-horizontal\">\n    <div class=\"row-fluid\">\n      <div class=\"span12\">\n        <div class=\"control-group\">\n          <label for=\"\" class=\"control-label\">Opis</label>\n          <div class=\"controls\"><textarea class=\"span12 input-description\">{{ description }}</textarea></div>\n        </div>\n        <div class=\"control-group\">\n          <label for=\"\" class=\"control-label\">Szerokość geograficzna</label>\n          <div class=\"controls\"><input type=\"text\" class=\"span6 input-latitude\" value=\"{{ latitude }}\" placeholder=\"51.110195\"/></div>\n        </div>\n        <div class=\"control-group\">\n          <label for=\"\" class=\"control-label\">Długość geograficzna</label>\n          <div class=\"controls\"><input type=\"text\" class=\"span6 input-longitude\" value=\"{{ longitude }}\" placeholder=\"17.031404\"/></div>\n        </div>\n      </div>\n    </div>\n    \n  </form>\n</section>\n\n\n<div id=\"elements\"></div>\n  \n<div class=\"form-actions section\">\n  \n  <button class=\"destroy btn btn-large\">\n    <i class=\"icon-remove\"></i>\n    Usuń\n  </button>\n  \n  <button class=\"save btn btn-large btn-primary pull-right\">\n    <i class=\"icon-ok icon-white\"></i>\n    Zapisz\n  </button>\n</div>";
    };

    PlaceShowView.prototype.events = {
      'click .save': 'save',
      'click .destroy': 'destroy'
    };

    PlaceShowView.prototype.initialize = function() {
      this.model.on('change', this.render);
      return this.model.on('reset', this.render);
    };

    PlaceShowView.prototype.save = function(e) {
      var attributes;
      e.preventDefault();
      attributes = {
        name: this.$('.input-title').val(),
        description: this.$('.input-description').val(),
        latitude: Number(this.$('.input-latitude').val()),
        longitude: Number(this.$('.input-longitude').val())
      };
      this.model.set(attributes);
      return this.trigger('save', this.model);
    };

    PlaceShowView.prototype.destroy = function(e) {
      e.preventDefault();
      this.model.set({
        is_deleted: true
      });
      return this.trigger('destroy', this.model);
    };

    PlaceShowView.prototype.render = function() {
      this.$el.html(this.template().render(this.model.toJSON()));
      return this;
    };

    return PlaceShowView;

  })(Backbone.View);

  RestaurantUser = (function(_super) {

    __extends(RestaurantUser, _super);

    RestaurantUser.name = 'RestaurantUser';

    function RestaurantUser() {
      return RestaurantUser.__super__.constructor.apply(this, arguments);
    }

    RestaurantUser.prototype.defaults = {
      role: "restaurant"
    };

    RestaurantUser.prototype.validate = function(attrs) {
      if (attrs.role !== "restaurant") {
        return "role: restaurant";
      }
      if (attrs.username === "new") {
        return "Nazwa new zabroniona";
      }
    };

    return RestaurantUser;

  })(StackMob.User);

  RestaurantUsers = (function(_super) {

    __extends(RestaurantUsers, _super);

    RestaurantUsers.name = 'RestaurantUsers';

    function RestaurantUsers() {
      return RestaurantUsers.__super__.constructor.apply(this, arguments);
    }

    RestaurantUsers.prototype.model = RestaurantUser;

    RestaurantUsers.prototype.parse = function(response) {
      return _(response).reject(function(model) {
        return model.is_deleted || model.role !== "restaurant";
      });
    };

    return RestaurantUsers;

  })(LoadableCollection);

  RestaurantUserView = (function(_super) {

    __extends(RestaurantUserView, _super);

    RestaurantUserView.name = 'RestaurantUserView';

    function RestaurantUserView() {
      return RestaurantUserView.__super__.constructor.apply(this, arguments);
    }

    RestaurantUserView.prototype.labelAttribute = 'username';

    RestaurantUserView.prototype.initialize = function() {
      RestaurantUserView.__super__.initialize.apply(this, arguments);
      return this.model.on('sync', this.render, this);
    };

    return RestaurantUserView;

  })(SelectableView);

  RestaurantUserShowView = (function(_super) {

    __extends(RestaurantUserShowView, _super);

    RestaurantUserShowView.name = 'RestaurantUserShowView';

    function RestaurantUserShowView() {
      this.render = __bind(this.render, this);

      this.destroy = __bind(this.destroy, this);

      this.save = __bind(this.save, this);

      this.updateName = __bind(this.updateName, this);
      return RestaurantUserShowView.__super__.constructor.apply(this, arguments);
    }

    RestaurantUserShowView.prototype.labelAttribute = 'username';

    RestaurantUserShowView.prototype.titlePlaceholder = 'Nazwa nowej restauracji';

    RestaurantUserShowView.prototype.template = function() {
      return "<div id=\"title-section\">\n  <div class=\"add-section\">\n    <input type=\"text\" class=\"input-title add edit\" {{#if " + this.labelAttribute + " }}disabled{{/if}} placeholder=\"" + this.titlePlaceholder + "\" autofocus=\"autofocus\" value=\"{{ " + this.labelAttribute + " }}\"/>\n  </div>\n</div>\n\n<section class=\"item row-fluid\">\n  <div class=\"span12 form-horizontal\">\n    <legend>\n      Dedykowany użytkownik\n      <small>mogący aktualizować dane teleadresowe i menu</small>\n    </legend>\n    <div class=\"control-group\">\n      <label for=\"\" class=\"control-label\">Identyfikator</label>\n      <div class=\"controls\"><input type=\"text\" disabled class=\"span12 input-username\" value=\"{{ " + this.labelAttribute + " }}\"/></div>\n    </div>\n    \n    <div class=\"control-group\">\n      <label for=\"\" class=\"control-label\">Hasło</label>\n      <div class=\"controls\"><input type=\"password\" class=\"span12 input-password\"/></div>\n    </div>\n  \n    <div class=\"control-group\">\n      <label for=\"\" class=\"control-label\">Hasło ponownie</label>\n      <div class=\"controls\"><input type=\"password\" class=\"span12 input-password-confirmation\"/></div>\n    </div>\n    \n    \n  </div>\n</section>\n  \n<div class=\"form-actions section\">\n  \n  <button class=\"destroy btn btn-large\">\n    <i class=\"icon-remove\"></i>\n    Usuń\n  </button>\n  \n  <button class=\"save btn btn-large btn-primary pull-right\">\n    <i class=\"icon-ok icon-white\"></i>\n    Zapisz\n  </button>\n</div>";
    };

    RestaurantUserShowView.prototype.events = {
      'click .save': 'save',
      'click .destroy': 'destroy',
      'keyup .input-title': 'updateName'
    };

    RestaurantUserShowView.prototype.initialize = function(_arg) {
      this.user = _arg.user;
      this.model.on('change', this.render);
      return this.model.on('reset', this.render);
    };

    RestaurantUserShowView.prototype.updateName = function(e) {
      return this.$('.input-username').val(this.$('.input-title').val());
    };

    RestaurantUserShowView.prototype.save = function(e) {
      var password, passwordConfirmation, username;
      e.preventDefault();
      if (this.model.isNew()) {
        username = this.$('.input-title').val();
        if (!username) {
          alert('Musisz podać nazwę restauracji');
          this.$('.input-title').focus();
          return;
        }
      } else {
        username = this.model.get('username');
      }
      password = this.$('.input-password').val();
      if (!password) {
        alert('Musisz podać hasło użytkownika');
        this.$('.input-password').focus();
        return;
      }
      passwordConfirmation = this.$('.input-password-confirmation').val();
      if (password !== passwordConfirmation) {
        alert('Oba hasła muszą być jednakowe');
        this.$('.input-password-confirmation').focus();
        return;
      }
      this.model.set({
        username: username,
        password: password
      });
      return this.trigger('save', this.model, username, password);
    };

    RestaurantUserShowView.prototype.destroy = function(e) {
      e.preventDefault();
      return this.trigger('destroy', this.model);
    };

    RestaurantUserShowView.prototype.render = function() {
      this.$el.html(this.template().render(this.model.toJSON()));
      return this;
    };

    return RestaurantUserShowView;

  })(Backbone.View);

  App = (function(_super) {

    __extends(App, _super);

    App.name = 'App';

    function App() {
      this.updateLinks = __bind(this.updateLinks, this);

      this.restaurants = __bind(this.restaurants, this);

      this.map = __bind(this.map, this);

      this.contact = __bind(this.contact, this);

      this.informations = __bind(this.informations, this);

      this.showSurveyById = __bind(this.showSurveyById, this);

      this.showSurvey = __bind(this.showSurvey, this);

      this.onSelectSurvey = __bind(this.onSelectSurvey, this);
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.routes = {
      '': 'index',
      'notifications': 'notifications',
      'surveys': 'surveys',
      'surveys/new': 'newSurvey',
      'surveys/:id': 'showSurveyById',
      'informations': 'informations',
      'informations/:id': 'informations',
      'map': 'map',
      'map/:id': 'map',
      'restaurants': 'restaurants',
      'restaurants/:id*': 'restaurants',
      'contact': 'contact',
      'contact/:id': 'contact'
    };

    App.prototype.initialize = function() {
      var _this = this;
      this.on('all', this.updateLinks);
      this.$main = $('body');
      this.Notifications = new Notifications();
      this.Surveys = new Surveys();
      this.Surveys.on('new', function() {
        return _this.navigate('/surveys/new', true);
      });
      this.Surveys.on('show', this.onSelectSurvey);
      this.Surveys.on('publish', function(model) {
        _this.Surveys.add(model);
        return _this.navigate("/surveys/" + model.id, true);
      });
      this.InformationGroups = new InformationGroups();
      this.InformationGroups.on('select', function(model) {
        return _this.navigate("/informations/" + model.id, true);
      });
      this.ContactGroups = new ContactGroups();
      this.ContactGroups.on('select', function(model) {
        return _this.navigate("/contact/" + model.id, true);
      });
      this.Places = new Places();
      this.Places.on('select', function(model) {
        return _this.navigate("/map/" + model.id, true);
      });
      this.RestaurantUsers = new RestaurantUsers();
      return this.RestaurantUsers.on('select', function(model) {
        return _this.navigate("/restaurants/" + model.id, true);
      });
    };

    App.prototype.onSelectSurvey = function(model) {
      this.Surveys.active = model;
      this.navigate("/surveys/" + (model.id || model.cid));
      return this.showSurvey(model);
    };

    App.prototype.setView = function(view) {
      this.$main.html(view.render().el);
      return this.updateLinks();
    };

    App.prototype.notifications = function() {
      this.setView(new NotificationsView({
        collection: this.Notifications.load()
      }));
      return this.Notifications.fetch();
    };

    App.prototype.surveys = function() {
      var addView, collection, listView, view;
      collection = this.Surveys;
      collection.active = null;
      listView = new CollectionView({
        collection: collection.load(),
        itemView: SurveyView
      });
      addView = new AddView({
        collection: collection,
        placeholder: 'Tytuł nowej ankiety'
      });
      view = new MenuLayout({
        title: 'Ankiety',
        listView: listView,
        addView: addView
      });
      return this.setView(view);
    };

    App.prototype.newSurvey = function() {
      var collection, listView, mainView, model, view;
      model = new Survey();
      collection = this.Surveys;
      collection.active = model;
      mainView = new SurveyEditView({
        model: model
      });
      listView = new CollectionView({
        collection: collection,
        itemView: SurveyView,
        active: model
      });
      view = new SidebarLayout({
        title: 'Ankiety',
        backLink: '#/surveys',
        mainView: mainView,
        listView: listView
      });
      this.setView(view);
      collection.load();
      return mainView.openTitle();
    };

    App.prototype.showSurvey = function(model) {
      var collection, listView, mainView, view;
      window.model = model;
      collection = this.Surveys;
      mainView = model.id != null ? new SurveyShowView({
        model: model
      }) : new SurveyEditView({
        model: model
      });
      listView = new CollectionView({
        collection: collection,
        itemView: SurveyView
      });
      view = new SidebarLayout({
        title: 'Ankiety',
        backLink: '#/surveys',
        mainView: mainView,
        listView: listView
      });
      return this.setView(view);
    };

    App.prototype.showSurveyById = function(id) {
      var _this = this;
      return $.when(this.Surveys.load()).then(function(collection) {
        var model;
        model = collection.get(id) || collection.getByCid(id);
        if (model != null) {
          return _this.showSurvey(model);
        } else {
          return _this.navigate('/surveys', true);
        }
      });
    };

    App.prototype.informations = function(id) {
      var addView, collection, listView, view,
        _this = this;
      collection = this.InformationGroups;
      listView = new MenuCollectionView({
        collection: collection.load(),
        itemView: InformationGroupView
      });
      if (id != null) {
        if (id === 'new') {
          return $.when(collection.load()).then(function(collection) {
            var model;
            window.model = model = collection.createNew();
            collection.add(model);
            return model.save({}, {
              success: function() {
                return _this.navigate("/informations/" + model.id, true);
              }
            });
          });
        } else {
          return $.when(collection.load()).then(function(collection) {
            var mainView, model, view;
            if (window.model = model = collection.get(id)) {
              mainView = new InformationGroupShowView({
                model: model
              });
              view = new SidebarLayout({
                title: 'Informacje',
                backLink: '#/informations',
                mainView: mainView,
                listView: listView
              });
              return _this.setView(view);
            } else {
              console.warn("Nie ma elementu o identyfikatorze " + id + ". Przekierowuję do listy elementów.");
              return _this.navigate('/informations', true);
            }
          });
        }
      } else {
        addView = new AddView({
          collection: collection,
          placeholder: 'Tytuł nowego działu'
        });
        addView.on('click', function() {
          return _this.navigate('informations/new', true);
        });
        view = new MenuLayout({
          title: 'Informacje',
          listView: listView,
          addView: addView
        });
        this.setView(view);
        return collection.load();
      }
    };

    App.prototype.contact = function(id) {
      var addView, collection, listView, view,
        _this = this;
      collection = this.ContactGroups;
      listView = new SortableCollectionView({
        collection: collection.load(),
        itemView: ContactGroupView
      });
      if (id != null) {
        if (id === 'new') {
          return $.when(collection.load()).then(function(collection) {
            var model;
            window.model = model = new ContactGroup();
            collection.add(model);
            return model.save({}, {
              success: function() {
                return _this.navigate("/contact/" + model.id, true);
              }
            });
          });
        } else {
          return $.when(collection.load()).then(function(collection) {
            var mainView, model, view;
            if (window.model = model = collection.get(id)) {
              mainView = new ContactGroupShowView({
                model: model
              });
              view = new SidebarLayout({
                title: 'Kontakt',
                backLink: '#/contact',
                mainView: mainView,
                listView: listView
              });
              return _this.setView(view);
            } else {
              console.warn("Nie ma elementu o identyfikatorze " + id + ". Przekierowuję do listy elementów.");
              return _this.navigate('/contact', true);
            }
          });
        }
      } else {
        addView = new AddView({
          collection: collection,
          placeholder: 'Tytuł nowego działu'
        });
        addView.on('click', function() {
          return _this.navigate('contact/new', true);
        });
        view = new MenuLayout({
          title: 'Kontakt',
          listView: listView,
          addView: addView
        });
        this.setView(view);
        return collection.load();
      }
    };

    App.prototype.map = function(id) {
      var addView, collection, listView, mainView, model, view,
        _this = this;
      collection = this.Places;
      listView = new CollectionView({
        collection: collection.load(),
        itemView: PlaceView
      });
      if (id === "new") {
        model = new Place();
        mainView = new PlaceShowView({
          model: model
        });
        view = new SidebarLayout({
          title: 'Mapa',
          backLink: '#/map',
          mainView: mainView,
          listView: listView
        });
        this.setView(view);
        mainView.on('save', function(model) {
          return collection.create(model);
        });
        mainView.on('destroy', function(model) {
          return _this.navigate("/map", true);
        });
        return model.on('sync', function() {
          return _this.navigate("/map/" + model.id, true);
        });
      } else if (id != null) {
        return $.when(collection.load()).then(function(collection) {
          if (model = collection.get(id)) {
            mainView = new PlaceShowView({
              model: model
            });
            mainView.on('save', function(model) {
              return model.save();
            });
            mainView.on('destroy', function(model) {
              model.save();
              collection.remove(model);
              return _this.navigate("/map", true);
            });
            view = new SidebarLayout({
              title: 'Mapa',
              backLink: '#/map',
              mainView: mainView,
              listView: listView
            });
            return _this.setView(view);
          } else {
            console.warn("Nie ma elementu o identyfikatorze " + id + ". Przekierowuję do listy elementów.");
            return _this.navigate('/map', true);
          }
        });
      } else {
        addView = new AddView({
          collection: collection,
          placeholder: 'Nazwa nowego miejsca'
        });
        addView.on('click', function() {
          return _this.navigate('/map/new', true);
        });
        view = new MenuLayout({
          title: 'Mapa',
          listView: listView,
          addView: addView
        });
        this.setView(view);
        return collection.load();
      }
    };

    App.prototype.restaurants = function(id) {
      var MenuItemView, ShowView, addView, collection, listView, mainView, model, path, placeholder, title, view,
        _this = this;
      collection = this.RestaurantUsers;
      title = "Restauracje";
      placeholder = "Nazwa nowej restauracji";
      path = "/restaurants";
      ShowView = RestaurantUserShowView;
      MenuItemView = RestaurantUserView;
      listView = new CollectionView({
        collection: collection.load(),
        itemView: MenuItemView
      });
      if (id === "new") {
        model = new RestaurantUser({
          username: void 0
        });
        mainView = new ShowView({
          model: model,
          collection: collection
        });
        view = new SidebarLayout({
          title: title,
          backLink: "#" + path,
          mainView: mainView,
          listView: listView
        });
        this.setView(view);
        mainView.on('save', function(model) {
          return collection.create(model);
        });
        mainView.on('destroy', function(model) {
          model.destroy();
          return _this.navigate(path, true);
        });
        model.on('sync', function() {
          return _this.navigate("" + path + "/" + (model.id.toURL()), true);
        });
      } else if (id != null) {
        $.when(collection.load()).then(function(collection) {
          if (model = collection.get(id)) {
            mainView = new ShowView({
              model: model
            });
            mainView.on('save', function(model, username, password) {
              return model.destroy({
                success: function() {
                  return collection.create({
                    username: username,
                    password: password
                  }, {
                    success: function() {
                      return _this.navigate("" + path + "/" + (model.id.toURL()), true);
                    }
                  });
                }
              });
            });
            mainView.on('destroy', function(model) {
              model.destroy();
              _this.navigate(path, true);
              return $.when(_this.Restaurants.load()).then(function(restaurants) {
                var restaurant;
                if (restaurant = restaurants.find(function(r) {
                  return r.get('name') === model.id;
                })) {
                  return restaurant.save({
                    is_deleted: true
                  });
                }
              });
            });
            view = new SidebarLayout({
              title: title,
              backLink: "#" + path,
              mainView: mainView,
              listView: listView
            });
            return _this.setView(view);
          } else {
            console.warn("Nie ma elementu o identyfikatorze " + id + ". Przekierowuję do listy elementów.");
            return _this.navigate(path, true);
          }
        });
      } else {
        addView = new AddView({
          collection: collection,
          placeholder: placeholder
        });
        addView.on('click', function() {
          return _this.navigate("" + path + "/new", true);
        });
        view = new MenuLayout({
          title: title,
          listView: listView,
          addView: addView
        });
        this.setView(view);
      }
      return collection.load();
    };

    App.prototype.index = function() {
      return this.navigate('/notifications', true);
    };

    App.prototype.updateLinks = function() {
      var hash;
      hash = window.location.hash;
      if (!hash.startsWith('#/')) {
        hash = '#/' + hash.slice(1);
      }
      $("a[href].link").each(function() {
        var active, href;
        href = $(this).attr('href');
        active = hash === href || hash.startsWith(href) && hash.charAt(href.length) === '/';
        return $(this).parent().toggleClass('active', active);
      });
      return $("[data-id]").each(function() {
        var $el, id, parts;
        parts = hash.split('/');
        id = parts[parts.length - 1];
        $el = $(this);
        return $el.toggleClass('active', $el.data('id') === id);
      });
    };

    return App;

  })(Backbone.Router);

  Restaurant = (function(_super) {

    __extends(Restaurant, _super);

    Restaurant.name = 'Restaurant';

    function Restaurant() {
      return Restaurant.__super__.constructor.apply(this, arguments);
    }

    Restaurant.prototype.schemaName = 'restaurant';

    return Restaurant;

  })(ModelWithImage);

  Restaurants = (function(_super) {

    __extends(Restaurants, _super);

    Restaurants.name = 'Restaurants';

    function Restaurants() {
      return Restaurants.__super__.constructor.apply(this, arguments);
    }

    Restaurants.prototype.model = Restaurant;

    Restaurants.prototype.getById = function(id, callback) {
      var q,
        _this = this;
      q = new Restaurants.Query();
      q.equals('restaurant_id', id);
      return this.query(q, {
        success: function(collection) {
          return callback(null, collection.first());
        },
        error: function(e) {
          return callback(e);
        }
      });
    };

    return Restaurants;

  })(StackMob.Collection);

  MenuItem = (function(_super) {

    __extends(MenuItem, _super);

    MenuItem.name = 'MenuItem';

    function MenuItem() {
      return MenuItem.__super__.constructor.apply(this, arguments);
    }

    MenuItem.prototype.schemaName = 'menu_item';

    return MenuItem;

  })(ModelWithImage);

  MenuItems = (function(_super) {

    __extends(MenuItems, _super);

    MenuItems.name = 'MenuItems';

    function MenuItems() {
      return MenuItems.__super__.constructor.apply(this, arguments);
    }

    MenuItems.prototype.model = MenuItem;

    MenuItems.prototype.parse = function(response) {
      return _(response).reject(function(model) {
        return model.is_deleted;
      });
    };

    MenuItems.prototype.comparator = function(menuItem) {
      var a;
      a = (menuItem.get('is_featured') ? -1000 : 0) + menuItem.get('price');
      return a;
    };

    MenuItems.prototype.defaults = {
      is_featured: false
    };

    MenuItems.prototype.getByRestaurantId = function(id, callback) {
      var q,
        _this = this;
      q = new MenuItems.Query();
      q.equals('restaurant', id);
      return this.query(q, {
        success: function(collection) {
          return callback(null, collection);
        },
        error: function(e) {
          return callback(e);
        }
      });
    };

    return MenuItems;

  })(StackMob.Collection);

  RestaurantMenuItemView = (function(_super) {

    __extends(RestaurantMenuItemView, _super);

    RestaurantMenuItemView.name = 'RestaurantMenuItemView';

    function RestaurantMenuItemView() {
      this.render = __bind(this.render, this);

      this.destroy = __bind(this.destroy, this);

      this.save = __bind(this.save, this);

      this.show = __bind(this.show, this);

      this.edit = __bind(this.edit, this);

      this.onSync = __bind(this.onSync, this);
      return RestaurantMenuItemView.__super__.constructor.apply(this, arguments);
    }

    RestaurantMenuItemView.prototype.template = function() {
      return "<section class=\"menu-item editable {{#if name}} {{else}} active {{/if}}\">\n  <div class=\"configurable show\">\n    <h3>\n      {{#if is_featured}}\n        <i class=\"icon-star\"></i>\n      {{/if}}\n      {{ name }}\n      <small>{{ price }} zł</small>\n    </h3>\n    <p>{{ description }}</p>\n  </div>\n  <div class=\"row-fluid edit\">\n    <form class=\"span12 item compact-bottom\">\n      \n      <div class=\"control-group\">\n        <label for=\"\" class=\"control-label\"></label>\n        <div class=\"controls\">\n          <img class=\"image-preview\" src=\"{{ image_url }}\"/>\n        </div>\n      </div>\n    \n      <div class=\"control-group\">\n        <label for=\"\" class=\"control-label\">Zdjęcie</label>\n        <div class=\"controls\">\n          <input type=\"file\" class=\"input-image\" name=\"image\" />\n        </div>\n      </div>\n    \n      <div class=\"control-group\">\n        <label for=\"\" class=\"control-label\">Nazwa</label>\n        <div class=\"controls\"><input type=\"text\" class=\"span12 input-name\" value=\"{{ name }}\"/></div>\n      </div>\n      \n      <div class=\"control-group\">\n        <label for=\"\" class=\"control-label\">Cena</label>\n        <div class=\"controls\"><input type=\"text\" class=\"span12 input-price\" value=\"{{ price }}\" placeholder=\"9.99\"/></div>\n      </div>\n      \n      <div class=\"control-group\">\n        <label for=\"\" class=\"control-label\">Opis</label>\n        <div class=\"controls\">\n          <textarea rows=\"3\" class=\"span12 input-description\">{{ description }}</textarea>\n        </div>\n      </div>\n      \n      <div class=\"control-group\">\n        <label for=\"\" class=\"control-label\"><i class=\"icon-star\"></i> Polecane</label>\n        <div class=\"controls\">\n            <input type=\"checkbox\" class=\"span12 input-featured\" {{#if is_featured}}checked{{/if}}/>\n        </div>\n      </div>\n      \n      <div class=\"form-actions compact\">\n        <button class=\"btn btn-primary btn-large save pull-right\">\n          <i class=\"icon-ok icon-white\"></i>\n          Zapisz\n        </button>\n        <button class=\"btn btn-large destroy\">\n          <i class=\"icon-remove\"></i>\n          Usuń\n        </button>\n      </div>\n      \n    </form>\n  </div>\n</section>";
    };

    RestaurantMenuItemView.prototype.initialize = function() {
      return this.model.on('sync', this.onSync);
    };

    RestaurantMenuItemView.prototype.events = {
      'click .show': 'edit',
      'click .save': 'save',
      'submit form': 'save',
      'click .destroy': 'destroy',
      'change .input-image': 'onImageChange'
    };

    RestaurantMenuItemView.prototype.onSync = function(e) {
      this.$('section').removeClass('waiting');
      return this.render();
    };

    RestaurantMenuItemView.prototype.edit = function(e) {
      return this.$('section').addClass('active');
    };

    RestaurantMenuItemView.prototype.show = function(e) {
      return this.$('section').removeClass('active');
    };

    RestaurantMenuItemView.prototype.save = function(e) {
      var _this = this;
      e.preventDefault();
      e.stopPropagation();
      this.model.set({
        name: this.$('.input-name').val(),
        description: this.$('.input-description').val(),
        price: Number(this.$('.input-price').val()),
        is_featured: !!this.$('.input-featured').attr('checked'),
        restaurant: this.options.restaurant
      });
      this.model.save({}, {
        success: function() {
          return _this.onSync();
        },
        error: function() {
          alert('Aktualizacja nie powiodła się, spróbuj ponownie później');
          return _this.$('section').removeClass('active');
        }
      });
      return this.$('section').addClass('waiting');
    };

    RestaurantMenuItemView.prototype.destroy = function(e) {
      e.preventDefault();
      this.model.set({
        is_deleted: true
      });
      this.model.save();
      this.remove();
      return this.collection.remove(this.model);
    };

    RestaurantMenuItemView.prototype.initialize = function() {
      return this.model.on('save', this.render);
    };

    RestaurantMenuItemView.prototype.render = function() {
      this.$el.html(this.template().render(this.model.toJSON()));
      return this;
    };

    return RestaurantMenuItemView;

  })(View);

  RestaurantView = (function(_super) {

    __extends(RestaurantView, _super);

    RestaurantView.name = 'RestaurantView';

    function RestaurantView() {
      this.render = __bind(this.render, this);

      this.create = __bind(this.create, this);

      this.save = __bind(this.save, this);
      return RestaurantView.__super__.constructor.apply(this, arguments);
    }

    RestaurantView.prototype.itemView = RestaurantMenuItemView;

    RestaurantView.prototype.getImagePreview = function() {
      return this.$('.restaurant-image-preview');
    };

    RestaurantView.prototype.template = function() {
      return "{{{ restaurantNavbar }}}\n\n<div class=\"container\">\n  \n  <div class=\"row\">\n    <div class=\"span6\">\n        <div class=\"category\">\n          <h1>\n            {{ name }}\n            <small>Informacje o restauracji</small>\n          </h1>\n        </div>\n      <form id=\"restaurant-info-form\">\n      \n        <section class=\"row-fluid item restaurant-form-section\">\n          <div class=\"span12 form-horizontal\">\n            \n            <div class=\"control-group\">\n              <label for=\"\" class=\"control-label\"></label>\n              <div class=\"controls\">\n                <img class=\"restaurant-image-preview\" src=\"{{ image_url }}\"/>\n              </div>\n            </div>\n            \n            <div class=\"control-group\">\n              <label for=\"\" class=\"control-label\">Zdjęcie</label>\n              <div class=\"controls\">\n                <input type=\"file\" class=\"restaurant-input-image\" name=\"image\" />\n              </div>\n            </div>\n            \n            <div class=\"control-group\">\n              <label for=\"\" class=\"control-label\">Nazwa</label>\n              <div class=\"controls\">\n                <input type=\"text\" disabled class=\"span12\" value=\"{{ name }}\"/>\n              </div>\n            </div>\n\n            <div class=\"control-group\">\n              <label for=\"\" class=\"control-label\">Adres</label>\n              <div class=\"controls\">\n                <input type=\"text\" class=\"span12 input-address\" value=\"{{ address }}\"/>\n              </div>\n            </div>\n          \n            <div class=\"control-group\">\n              <label for=\"\" class=\"control-label\">Telefon</label>\n              <div class=\"controls\">\n                <input type=\"text\" class=\"span12 input-phone\" value=\"{{ phone }}\"/>\n              </div>\n            </div>\n          \n            <div class=\"control-group\">\n              <label for=\"\" class=\"control-label\">Strona www</label>\n              <div class=\"controls\">\n                <input type=\"text\" class=\"span12 input-url\" value=\"{{ url }}\"/>\n              </div>\n            </div>\n          \n          </div>\n        </section>\n        \n        <div class=\"form-actions section\">\n          <button class=\"btn btn-primary btn-large pull-right save\">\n            <i class=\"icon-ok icon-white\"></i>\n            Zapisz\n          </button>\n        </div>\n        \n      </form>\n    </div>\n    <div class=\"span6\">\n      <div class=\"category\">\n        <h1>\n          Menu\n        </h1>\n      </div>\n      \n      <div id=\"menu\" class=\"clearfix\">\n        <section class=\"item\">\n          Brak pozycji menu\n        </section>\n      </div>          \n      <div class=\"form-actions section\">\n        <button class=\"btn btn-primary btn-large pull-right create\">\n          <i class=\"icon-plus icon-white\"></i>\n          Dodaj do menu\n        </button>\n      </div>\n    </div>\n  </div>\n  <!-- {{{footer}}} -->\n</div>";
    };

    RestaurantView.prototype.initialize = function() {
      this.model.on('reset', this.render);
      this.model.on('sync', this.render);
      window.model = this.model;
      return RestaurantView.__super__.initialize.apply(this, arguments);
    };

    RestaurantView.prototype.events = {
      'click .save': 'save',
      'submit #restaurant-info-form': 'save',
      'click .create': 'create',
      'change .restaurant-input-image': 'onImageChange'
    };

    RestaurantView.prototype.save = function(e) {
      this.$('.restaurant-form-section').addClass('waiting');
      e.preventDefault();
      this.model.set({
        address: this.$('.input-address').val(),
        phone: this.$('.input-phone').val(),
        url: this.$('.input-url').val()
      });
      return this.model.save();
    };

    RestaurantView.prototype.create = function(e) {
      e.preventDefault();
      return this.collection.create(new MenuItem);
    };

    RestaurantView.prototype.render = function() {
      this.$el.html(this.template().render(this.model.toJSON()));
      this.$collection = this.$('#menu');
      return RestaurantView.__super__.render.apply(this, arguments);
    };

    return RestaurantView;

  })(CollectionView);

  $(function() {
    var auth, bazylia, displayRestaurantPanelById, loginView, _ref;
    window.globals = {};
    $("[rel='tooltip']").tooltip();
    displayRestaurantPanelById = function(id, user) {
      var _this = this;
      return new Restaurants().getById(id, function(error, model) {
        if (error) {
          return console.error("Nie mogę ściągnąć restauracji o id " + id, error);
        } else {
          if (!model) {
            model = new Restaurant({
              restaurant_id: id,
              name: id
            });
            model.create();
          }
          return new MenuItems().getByRestaurantId(id, function(e, collection) {
            var view;
            if (e) {
              return console.error("Nie mogę ściągnąć menu dla restauracji o id " + id, e);
            } else {
              view = new RestaurantView({
                model: model,
                collection: collection,
                restaurant: id
              });
              return $('body').html(view.render().el);
            }
          });
        }
      });
    };
    bazylia = false;
    auth = true;
    if (bazylia) {
      window.globals.current_user = "Bazylia";
      return displayRestaurantPanelById('Bazylia', new User({
        username: "Bazylia",
        role: "restaurant",
        restaurant: "Bazylia"
      }));
    } else {
      if (auth) {
        loginView = new LoginView();
        $('body').html(loginView.render().el);
        return loginView.on('login', function(user) {
          var _this = this;
          window.globals.current_user = user.get('username');
          return user.fetch({
            success: function() {
              var id, _ref;
              if (user.get('role') === "restaurant") {
                id = user.id;
                return displayRestaurantPanelById(id, user);
              } else {
                window.app = new App({
                  user: user
                });
                return (_ref = Backbone.history) != null ? _ref.start() : void 0;
              }
            }
          });
        });
      } else {
        window.app = new App();
        return (_ref = Backbone.history) != null ? _ref.start() : void 0;
      }
    }
  });

}).call(this);
