// Generated by CoffeeScript 1.3.1
(function() {
  var AddView, App, CollectionView, MenuLayout, Notification, NotificationView, Notifications, NotificationsView, Question, QuestionEditView, QuestionView, Questions, SidebarLayout, Survey, SurveyEditView, SurveyShowView, SurveyView, Surveys, helper, partial,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  StackMob.init({
    appName: "mkampus2",
    clientSubdomain: "mobilefactorysa",
    apiVersion: 1
  });

  moment.lang('pl');

  (function(String) {
    var templateCache, _base;
    (_base = String.prototype).startsWith || (_base.startsWith = function(str) {
      return this.indexOf(str) === 0;
    });
    templateCache = {};
    String.prototype.template = function() {
      return templateCache[this] || (templateCache[this] = Handlebars.compile(this));
    };
    return String.prototype.render = function(data) {
      return this.template()(data);
    };
  })(String);

  partial = function(sources) {
    var name, source, _results;
    _results = [];
    for (name in sources) {
      source = sources[name];
      _results.push(Handlebars.registerPartial(name, source));
    }
    return _results;
  };

  helper = function(helpers) {
    var fn, name, _results;
    _results = [];
    for (name in helpers) {
      fn = helpers[name];
      _results.push(Handlebars.registerHelper(name, fn));
    }
    return _results;
  };

  partial({
    navbar: "<div class=\"navbar navbar-fixed-top\">\n  <div class=\"navbar-inner\">\n    <div class=\"container\">\n      <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\">\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </a>\n      <div class=\"nav-collapse collapse\">\n        <ul class=\"nav\">\n          {{#links}}\n            <li>\n              <a class=\"link\" href=\"{{href}}\">{{label}}</a>\n            </li>\n          {{/links}}\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>"
  });

  helper({
    navbar: function(context) {
      return "{{> navbar}}".render({
        links: [
          {
            href: '#/notifications',
            label: 'Powiadomienia'
          }, {
            href: '#/surveys',
            label: 'Ankiety'
          }, {
            href: '#/informations',
            label: 'Informacje'
          }, {
            href: '#/map',
            label: 'Mapa'
          }, {
            href: '#/restaurants',
            label: 'Restauracje'
          }, {
            href: '#/contact',
            label: 'Kontakt'
          }
        ]
      });
    }
  });

  partial({
    footer: "<footer class=\"hidden-phone\">\n  <img src=\"/img/logo.png\" />\n</footer>"
  });

  helper({
    footer: function() {
      return "{{> footer}}".render();
    }
  });

  helper({
    header: function(title, options) {
      return "<header>\n  <div class=\"container list-view\">\n    <div class=\"row\">\n      <div class=\"span4 category\">\n        <h1>{{title}}</h1>\n      </div>\n      \n      <div class=\"span8 add-section\">\n        {{{add_section}}}\n      </div>\n    </div>\n  </div>\n</header>".render({
        title: title,
        add_section: options.fn(this)
      });
    }
  });

  helper({
    items: function(id) {
      return "<div class=\"container\">\n  <section>\n  <div class=\"row\" id=\"{{id}}\">\n    ...\n  </div>\n  </section>\n</div>".render({
        id: id
      });
    }
  });

  helper({
    layout: function(options) {
      return "{{{navbar}}}\n{{{content}}}\n{{{footer}}}".render({
        content: options.fn(this)
      });
    }
  });

  helper({
    timeHuman: function(time) {
      var timestamp;
      timestamp = moment(time);
      return timestamp.format('LLL');
    }
  });

  helper({
    timeAgo: function(time) {
      var timestamp;
      timestamp = moment(time);
      return timestamp.fromNow();
    }
  });

  helper({
    timeSwitch: function(time) {
      return "<span class=\"hover-switch\">\n  <span class=\"hover-on\">{{ timeHuman time }}</span>\n  <span class=\"hover-off\">{{ timeAgo time }}</span>\n</span>".render({
        time: time
      });
    }
  });

  CollectionView = (function(_super) {

    __extends(CollectionView, _super);

    CollectionView.name = 'CollectionView';

    function CollectionView() {
      this.addOne = __bind(this.addOne, this);

      this.addAll = __bind(this.addAll, this);
      return CollectionView.__super__.constructor.apply(this, arguments);
    }

    CollectionView.prototype.initialize = function() {
      var _this = this;
      console.log('CollectionView initialized');
      this.itemView || (this.itemView = this.options.itemView);
      return $.when(this.collection).then(function(collection) {
        console.log('collection', collection);
        collection.on('reset', _this.addAll);
        collection.on('add', _this.addAll);
        return collection.on('remove', _this.addAll);
      });
    };

    CollectionView.prototype.addAll = function() {
      var $collection,
        _this = this;
      $collection = this.$collection || this.$el;
      return $.when(this.collection).then(function(collection) {
        $collection.empty();
        return collection.each(_this.addOne);
      });
    };

    CollectionView.prototype.addOne = function(model) {
      var $collection, options, view;
      options = _.extend(_.clone(this.options), {
        model: model,
        collection: this.collection
      });
      view = new this.itemView(options);
      $collection = this.$collection || this.$el;
      if (this.options.prepend != null) {
        return $collection.prepend(view.render().el);
      } else {
        return $collection.append(view.render().el);
      }
    };

    CollectionView.prototype.render = function() {
      console.log('CollectionView rendered', this);
      this.addAll();
      return this;
    };

    return CollectionView;

  })(Backbone.View);

  AddView = (function(_super) {

    __extends(AddView, _super);

    AddView.name = 'AddView';

    function AddView() {
      return AddView.__super__.constructor.apply(this, arguments);
    }

    AddView.prototype.template = "<input type=\"text\" class=\"add\" placeholder=\"{{ placeholder }}\"/>";

    AddView.prototype.events = {
      'click input': 'add'
    };

    AddView.prototype.add = function(event) {
      return this.collection.trigger('new');
    };

    AddView.prototype.getPlaceholder = function() {
      return this.options.placeholder || "Dodaj";
    };

    AddView.prototype.render = function() {
      this.$el.html(this.template.render({
        placeholder: this.getPlaceholder()
      }));
      return this;
    };

    return AddView;

  })(Backbone.View);

  MenuLayout = (function(_super) {

    __extends(MenuLayout, _super);

    MenuLayout.name = 'MenuLayout';

    function MenuLayout() {
      return MenuLayout.__super__.constructor.apply(this, arguments);
    }

    MenuLayout.prototype.template = "{{#layout}}\n  <header>\n    <div class=\"container list-view\">\n      <div class=\"row\">\n        <div class=\"span4 category\">\n          <h1>{{ title }}</h1>\n        </div>\n        <div class=\"span8 add-section\">\n        </div>\n      </div>\n    </div>\n  </header>\n  <div class=\"container\">\n    <section>\n      <div class=\"row menu\">\n        <div class=\"span12 empty\">...</div>\n      </div>\n    </section>\n  </div>\n{{/layout}}";

    MenuLayout.prototype.render = function() {
      var $addSection, $list, addView, collection, listView, title;
      collection = this.collection;
      title = this.title || this.options.title;
      addView = this.addView || this.options.addView;
      listView = this.listView || this.options.listView;
      this.$el.html(this.template.render({
        title: title
      }));
      $addSection = this.$('.add-section');
      $list = this.$('.menu');
      addView.setElement($addSection);
      listView.setElement($list);
      addView.render();
      listView.render();
      return this;
    };

    return MenuLayout;

  })(Backbone.View);

  SidebarLayout = (function(_super) {

    __extends(SidebarLayout, _super);

    SidebarLayout.name = 'SidebarLayout';

    function SidebarLayout() {
      return SidebarLayout.__super__.constructor.apply(this, arguments);
    }

    SidebarLayout.prototype.template = "{{#layout}}\n  <div class=\"container item-view\">\n    <div class=\"row\">\n      <div class=\"span4\">\n        <div class=\"category\">\n          <a href=\"{{ backLink }}\"><h1>{{ title }}</h1></a>\n        </div>\n        <div class=\"row hidden-phone menu\">\n        </div>\n      </div>\n      <div class=\"span8 main\">\n      </div>\n    </div>\n  </div>\n{{/layout}}";

    SidebarLayout.prototype.render = function() {
      var $main, $menu, backLink, listView, mainView, title;
      title = this.title || this.options.title;
      backLink = this.backLink || this.options.backLink;
      mainView = this.mainView || this.options.mainView;
      listView = this.listView || this.options.listView;
      this.$el.html(this.template.render({
        title: title,
        backLink: backLink
      }));
      $main = this.$('.main');
      $menu = this.$('.menu');
      mainView.setElement($main);
      mainView.render();
      listView.setElement($menu);
      listView.render();
      return this;
    };

    return SidebarLayout;

  })(Backbone.View);

  Notification = (function(_super) {

    __extends(Notification, _super);

    Notification.name = 'Notification';

    function Notification() {
      return Notification.__super__.constructor.apply(this, arguments);
    }

    Notification.prototype.schemaName = 'notification';

    Notification.maxLength = 200;

    Notification.maxDisplayLength = 100;

    return Notification;

  })(StackMob.Model);

  Notifications = (function(_super) {

    __extends(Notifications, _super);

    Notifications.name = 'Notifications';

    function Notifications() {
      return Notifications.__super__.constructor.apply(this, arguments);
    }

    Notifications.prototype.model = Notification;

    return Notifications;

  })(StackMob.Collection);

  NotificationView = (function(_super) {

    __extends(NotificationView, _super);

    NotificationView.name = 'NotificationView';

    function NotificationView() {
      return NotificationView.__super__.constructor.apply(this, arguments);
    }

    NotificationView.prototype.className = 'notification span4';

    NotificationView.prototype.template = "<p class=\"date\">{{{ timeSwitch createddate }}}</p>\n<p class=\"content\">{{ content }}</p>";

    NotificationView.prototype.render = function() {
      this.$el.html(this.template.render(this.model.toJSON()));
      return this;
    };

    return NotificationView;

  })(Backbone.View);

  NotificationsView = (function(_super) {

    __extends(NotificationsView, _super);

    NotificationsView.name = 'NotificationsView';

    function NotificationsView() {
      this.reset = __bind(this.reset, this);
      return NotificationsView.__super__.constructor.apply(this, arguments);
    }

    NotificationsView.prototype.itemView = NotificationView;

    NotificationsView.prototype.template = "{{#layout}}\n  {{#header \"Powiadomienia\"}}\n    <form action=\"\" id=\"new-notification-form\" class=\"editable\">\n      <textarea name=\"\" id=\"new-notification-input\" rows=\"1\" class=\"add\" placeholder=\"Nowe powiadomienie\"></textarea>\n      <div class=\"form-actions edit\">\n        <div class=\"row-fluid\">\n          <div class=\"span6\">\n            <div class=\"progress\" id=\"new-notification-progress\">\n              <div id=\"new-notification-bar\" class=\"bar\" style=\"width: 0%;\"></div>\n            </div>\n          </div>\n          <div class=\"span6\">\n            <button type=\"submit\" id=\"new-notification-submit\" data-loading-text=\"Wysyłam...\" class=\"btn btn-primary btn-large pull-right\">\n              <i class=\"icon-ok icon-white\"></i>\n              Wyślij\n            </button>\n            <!-- <input type=\"submit\" id=\"new-notification-submit\" data-loading-text=\"Wysyłam...\" class=\"btn btn-primary btn-large pull-right\" value=\"Wyślij\" /> -->\n          </div>\n        </div>\n      </div>\n    </form>\n  {{/header}}\n  {{{items \"notifications\"}}}\n{{/layout}}";

    NotificationsView.prototype.events = {
      'focus #new-notification-input': 'edit',
      'blur #new-notification-input': 'show',
      'keyup #new-notification-input': 'update',
      'submit #new-notification-form': 'submit'
    };

    NotificationsView.prototype.initialize = function() {
      this.options.prepend = true;
      return NotificationsView.__super__.initialize.apply(this, arguments);
    };

    NotificationsView.prototype.edit = function() {
      this.$editable.addClass('active');
      return this.$input.attr('rows', 4);
    };

    NotificationsView.prototype.show = function() {
      if (this.$input.val().length > 0) {
        return;
      }
      this.$editable.removeClass('active');
      return this.$input.attr('rows', 1);
    };

    NotificationsView.prototype.update = function() {
      var barClass, letters, max, percent;
      max = Notification.maxLength;
      letters = this.$input.val().length;
      percent = letters / max * 100;
      barClass = letters <= Notification.maxDisplayLength ? 'progress-success' : percent <= 100 ? 'progress-warning' : 'progress-danger';
      this.$submit.toggleClass('disabled', percent > 100 || letters === 0);
      if (percent > 100) {
        percent = 100;
      }
      this.$bar.attr('style', "width: " + percent + "%;");
      return this.$progress.attr('class', "progress " + barClass);
    };

    NotificationsView.prototype.reset = function() {
      this.$input.val('');
      this.update();
      this.$submit.button('reset');
      return this.show();
    };

    NotificationsView.prototype.submit = function(e) {
      var content,
        _this = this;
      e.preventDefault();
      content = this.$input.val();
      if (content.length < 0 || content.length > Notification.maxLength) {
        return;
      }
      this.$submit.button('loading');
      return StackMob.customcode('broadcast', {
        content: content
      }, {
        success: function() {
          console.log('broadcast sent');
          return _this.collection.create({
            content: content
          }, {
            wait: true,
            success: function() {
              return _this.reset();
            },
            failure: function() {
              alert('Powiadomienie wysłano, ale nastąpił problem z bazą danych w wyniku czego nie pojawi się na liście. Przepraszamy.');
              return _this.reset();
            }
          });
        },
        error: function() {
          alert('Błąd podczas wysyłania powiadomienia. Spróbuj ponownie później.');
          return _this.$submit.button('reset');
        }
      });
    };

    NotificationsView.prototype.render = function() {
      this.$el.html(this.template.render());
      this.$input = this.$('#new-notification-input');
      this.$progress = this.$('#new-notification-progress');
      this.$bar = this.$('#new-notification-bar');
      this.$submit = this.$('#new-notification-submit');
      this.$editable = this.$('.editable');
      this.$collection = this.$('#notifications');
      NotificationsView.__super__.render.apply(this, arguments);
      this.update();
      return this;
    };

    return NotificationsView;

  })(CollectionView);

  Survey = (function(_super) {

    __extends(Survey, _super);

    Survey.name = 'Survey';

    function Survey() {
      this.saveQuestions = __bind(this.saveQuestions, this);
      return Survey.__super__.constructor.apply(this, arguments);
    }

    Survey.prototype.schemaName = 'survey';

    Survey.prototype.defaults = function() {
      return {
        title: ''
      };
    };

    Survey.prototype.validate = function(_arg) {
      var title;
      title = _arg.title;
      console.log('survey validation, title:', title);
      if (title.length < 1) {
        return "Ankieta musi mieć tytuł";
      }
      return null;
    };

    Survey.prototype.initialize = function() {
      return this.on('sync', this.saveQuestions);
    };

    Survey.prototype.saveQuestions = function() {
      var _this = this;
      return this.questions.each(function(model) {
        return model.save({
          survey: _this.id
        });
      });
    };

    Survey.prototype.getQuestions = function() {
      var fetchMyQuestions,
        _this = this;
      if (this.fetchQuestionsPromise == null) {
        this.fetchQuestionsPromise = $.Deferred();
        this.questions = new Questions();
        if (this.id != null) {
          fetchMyQuestions = new StackMob.Collection.Query();
          fetchMyQuestions.equals('survey', this.id);
          this.questions.query(fetchMyQuestions);
          this.questions.on('reset', function() {
            return _this.fetchQuestionsPromise.resolve(_this.questions);
          });
        } else {
          this.fetchQuestionsPromise.resolve(this.questions);
        }
      }
      return this.fetchQuestionsPromise;
    };

    return Survey;

  })(StackMob.Model);

  Surveys = (function(_super) {

    __extends(Surveys, _super);

    Surveys.name = 'Surveys';

    function Surveys() {
      return Surveys.__super__.constructor.apply(this, arguments);
    }

    Surveys.prototype.model = Survey;

    Surveys.prototype.load = function() {
      var _this = this;
      if (this.fetchPromise == null) {
        this.fetchPromise = $.Deferred();
        this.fetch({
          success: function() {
            return _this.fetchPromise.resolve(_this);
          }
        });
      }
      return this.fetchPromise;
    };

    return Surveys;

  })(StackMob.Collection);

  Question = (function(_super) {

    __extends(Question, _super);

    Question.name = 'Question';

    function Question() {
      return Question.__super__.constructor.apply(this, arguments);
    }

    Question.prototype.schemaName = 'question';

    Question.prototype.validate = function(attrs) {};

    Question.prototype.defaults = {
      type: "1",
      content: '',
      answers: ''
    };

    return Question;

  })(StackMob.Model);

  Questions = (function(_super) {

    __extends(Questions, _super);

    Questions.name = 'Questions';

    function Questions() {
      return Questions.__super__.constructor.apply(this, arguments);
    }

    Questions.prototype.model = Question;

    return Questions;

  })(StackMob.Collection);

  SurveyView = (function(_super) {

    __extends(SurveyView, _super);

    SurveyView.name = 'SurveyView';

    function SurveyView() {
      this.render = __bind(this.render, this);

      this.onSelect = __bind(this.onSelect, this);
      return SurveyView.__super__.constructor.apply(this, arguments);
    }

    SurveyView.prototype.template = "<div class=\"survey selectable span4 {{#if active}}active{{/if}}\">\n  <p class=\"date\">{{{ timeSwitch createddate }}}</p>\n  <p class=\"content\">\n    {{#if survey_id}}\n    {{else}}\n      {{#if active}}\n        <i class=\"icon-pencil icon-white\"></i>\n      {{else}}\n        <i class=\"icon-pencil\"></i>\n      {{/if}}\n      \n    {{/if}}\n    {{ title }}\n  </p>\n</div>";

    SurveyView.prototype.events = {
      'click': 'select'
    };

    SurveyView.prototype.initialize = function() {
      this.model.on('change', this.render);
      return this.collection.on('show', this.onSelect);
    };

    SurveyView.prototype.onSelect = function() {
      return this.render();
    };

    SurveyView.prototype.select = function() {
      return this.collection.trigger('show', this.model);
    };

    SurveyView.prototype.render = function() {
      var _this = this;
      $.when(this.collection).then(function(collection) {
        var active;
        active = collection.active && ((_this.model.id && collection.active.id === _this.model.id) || (collection.active.cid === _this.model.cid));
        _this.$el.html(_this.template.render(_.extend(_this.model.toJSON(), {
          active: active
        })));
        return console.log('render survey view', collection.active);
      });
      return this;
    };

    return SurveyView;

  })(Backbone.View);

  QuestionEditView = (function(_super) {

    __extends(QuestionEditView, _super);

    QuestionEditView.name = 'QuestionEditView';

    function QuestionEditView() {
      this.save = __bind(this.save, this);

      this.destroy = __bind(this.destroy, this);

      this.onDestroy = __bind(this.onDestroy, this);

      this.onEdit = __bind(this.onEdit, this);
      return QuestionEditView.__super__.constructor.apply(this, arguments);
    }

    QuestionEditView.prototype.template = "<section class=\"editable {{#if isOpen}} active {{/if}}\">\n  \n  <div class=\"configurable show\">\n    <h3>\n      <i class=\"icon-{{icon}}\"></i>\n      {{ content }}\n    </h3>\n  </div>\n  <div class=\"row show\">\n    {{#checkAnswers}}\n      <div class=\"span4 item\">\n        <label class=\"checkbox\">\n          <input type=\"checkbox\" disabled=\"disabled\" />\n          {{ this }}\n        </label>\n      </div>\n    {{/checkAnswers}}\n    {{#radioAnswers}}\n      <div class=\"span4 item\">\n        <label class=\"radio\">\n          <input type=\"radio\" disabled=\"disabled\" />\n          {{ this }}\n        </label>\n      </div>\n    {{/radioAnswers}}\n  </div>\n  \n  <div class=\"add-section edit\">\n    <form action=\"\">\n      <input class=\"name add\" type=\"text\" autofocus=\"autofocus\" placeholder=\"Treść nowego pytania\" value=\"{{ content }}\"/>\n      <div class=\"form-actions toolbar\">\n        <div class=\"btn-group\" >\n          {{#types}}\n            <button class=\"btn {{#if active}} active {{/if}} type\" data-type=\"{{ type }}\">\n              <i class=\"icon-{{ icon }}\"></i>\n              {{ name }}\n            </button>\n          {{/types}}\n        </div>\n      </div>\n      <textarea rows=3 class=\"add answers\" placeholder=\"Jedna odpowiedź w jednej linijce\">{{ textAnswers }}</textarea>\n      <div class=\"form-actions\">\n        <button class=\"btn btn-large destroy-question\">\n          <i class=\"icon-remove\"></i>\n          Usuń pytanie\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary btn-large pull-right save\">\n          <i class=\"icon-pencil icon-white\"></i>\n          Zapisz pytanie\n        </button>\n      </div>\n    </form>\n  </div>\n</section>";

    QuestionEditView.prototype.events = {
      'click .show': 'edit',
      'click .type': 'setType',
      'click .type > i': 'typeIcon',
      'submit form': 'save',
      'click .destroy-question': 'destroy'
    };

    QuestionEditView.prototype.typeIcon = function(e) {
      e.target = $(e.target).parent()[0];
      return this.setType(e);
    };

    QuestionEditView.prototype.initialize = function() {
      this.isOpen = !this.model.get('content');
      this.model.collection.on('edit', this.onEdit);
      return this.model.on('destroy', this.onDestroy);
    };

    QuestionEditView.prototype.onEdit = function(model) {
      console.log('onEdit');
      if (model === this.model) {
        return this.open();
      } else {
        console.log('edit another question');
        this.persist();
        if (this.model.get('content').length > 0) {
          console.log('has content -> save');
          return this.save();
        } else {
          console.log('no content -> destroy');
          return this.model.destroy();
        }
      }
    };

    QuestionEditView.prototype.onDestroy = function() {
      return this.remove();
    };

    QuestionEditView.prototype.destroy = function(e) {
      e.preventDefault();
      console.log(10);
      this.model.collection.trigger('close');
      return this.model.destroy();
    };

    QuestionEditView.prototype.save = function(event) {
      if (event != null) {
        if (typeof event.preventDefault === "function") {
          event.preventDefault();
        }
      }
      console.log('save');
      this.persist();
      if (this.model.get('content').length > 0) {
        console.log('has content');
        this.close();
        return this.model.collection.trigger('close');
      } else {
        console.log("doesn't have content");
        return this.render();
      }
    };

    QuestionEditView.prototype.edit = function() {
      return this.model.collection.trigger('edit', this.model);
    };

    QuestionEditView.prototype.open = function() {
      this.isOpen = true;
      return this.render();
    };

    QuestionEditView.prototype.close = function(event) {
      if (event != null) {
        if (typeof event.preventDefault === "function") {
          event.preventDefault();
        }
      }
      this.isOpen = false;
      return this.render();
    };

    QuestionEditView.prototype.setType = function(e) {
      var type;
      e.preventDefault();
      type = $(e.target).data('type');
      if (!type) {
        return;
      }
      type = type.toString();
      this.model.set({
        type: type
      });
      this.persist();
      return this.render();
    };

    QuestionEditView.prototype.persist = function() {
      var answers, name;
      name = this.$('.name').val();
      answers = this.serializeAnswers(this.$('.answers').val().split("\n"));
      return this.model.set({
        content: name,
        answers: answers
      });
    };

    QuestionEditView.prototype.focus = function() {
      return this.$name.focus();
    };

    QuestionEditView.prototype.focusOnAnswers = function() {
      return this.$answers.focus();
    };

    QuestionEditView.prototype.icons = {
      '1': 'star',
      '2': 'hand-right',
      '3': 'check',
      '4': 'comment'
    };

    QuestionEditView.prototype.serializeAnswers = function(answersArray) {
      return "[" + answersArray.join(",") + "]";
    };

    QuestionEditView.prototype.deserializeAnswers = function(answersSerialized) {
      return answersSerialized.slice(1, -1).split(',');
    };

    QuestionEditView.prototype.data = function() {
      var arrayAnswers, checkAnswers, radioAnswers, serializedAnswers, textAnswers, type, types;
      types = [
        {
          name: 'Ocena',
          type: '1',
          icon: this.icons['1']
        }, {
          name: '1 opcja',
          type: '2',
          icon: this.icons['2']
        }, {
          name: 'Wiele opcji',
          type: '3',
          icon: this.icons['3']
        }, {
          name: 'Komentarz',
          type: '4',
          icon: this.icons['4']
        }
      ];
      type = Number(this.model.get('type'));
      types[type - 1].active = true;
      serializedAnswers = this.model.get('answers');
      arrayAnswers = this.deserializeAnswers(serializedAnswers);
      textAnswers = arrayAnswers.join("\n");
      arrayAnswers = textAnswers.split("\n");
      radioAnswers = type === 2 ? arrayAnswers : void 0;
      checkAnswers = type === 3 ? arrayAnswers : void 0;
      return _.extend(this.model.toJSON(), {
        isOpen: this.isOpen,
        types: types,
        textAnswers: textAnswers,
        checkAnswers: checkAnswers,
        radioAnswers: radioAnswers,
        icon: this.icons[type]
      });
    };

    QuestionEditView.prototype.render = function() {
      var type;
      this.$el.html(this.template.render(this.data()));
      this.$name = this.$('.name');
      this.$answers = this.$('.answers');
      type = this.model.get('type');
      this.$answers.toggleClass('hidden', type !== "2" && type !== "3");
      this.$('.type').each(function() {
        return $(this).toggleClass('active', $(this).data('type').toString() === type);
      });
      if (type === "2" || type === "3") {
        this.focusOnAnswers();
      } else {
        this.focus();
      }
      return this;
    };

    return QuestionEditView;

  })(Backbone.View);

  QuestionView = (function(_super) {

    __extends(QuestionView, _super);

    QuestionView.name = 'QuestionView';

    function QuestionView() {
      return QuestionView.__super__.constructor.apply(this, arguments);
    }

    QuestionView.prototype.tagName = 'section';

    QuestionView.prototype.template = "<div class=\"item\">\n  <h3>\n    <i class=\"icon-{{icon}}\"></i>\n    {{ content }}\n  </h3>\n</div>\n<div class=\"row\">\n  {{#checkAnswers}}\n    <div class=\"span4 item\">\n      <label class=\"checkbox\">\n        <input type=\"checkbox\" disabled=\"disabled\" />\n        {{ this }}\n      </label>\n    </div>\n  {{/checkAnswers}}\n  {{#radioAnswers}}\n    <div class=\"span4 item\">\n      <label class=\"radio\">\n        <input type=\"radio\" disabled=\"disabled\" />\n        {{ this }}\n      </label>\n    </div>\n  {{/radioAnswers}}\n</div>";

    QuestionView.prototype.icons = {
      '1': 'star',
      '2': 'hand-right',
      '3': 'check',
      '4': 'comment'
    };

    QuestionView.prototype.serializeAnswers = function(answersArray) {
      return "[" + answersArray.join(",") + "]";
    };

    QuestionView.prototype.deserializeAnswers = function(answersSerialized) {
      return answersSerialized.slice(1, -1).split(',');
    };

    QuestionView.prototype.data = function() {
      var arrayAnswers, checkAnswers, radioAnswers, serializedAnswers, textAnswers, type, types;
      types = [
        {
          name: 'Ocena',
          type: '1',
          icon: this.icons['1']
        }, {
          name: 'Decyzja',
          type: '2',
          icon: this.icons['2']
        }, {
          name: 'Wiele opcji',
          type: '3',
          icon: this.icons['3']
        }, {
          name: 'Komentarz',
          type: '4',
          icon: this.icons['4']
        }
      ];
      type = Number(this.model.get('type'));
      types[type - 1].active = true;
      serializedAnswers = this.model.get('answers');
      arrayAnswers = this.deserializeAnswers(serializedAnswers);
      textAnswers = arrayAnswers.join("\n");
      radioAnswers = type === 2 ? arrayAnswers : void 0;
      checkAnswers = type === 3 ? arrayAnswers : void 0;
      return _.extend(this.model.toJSON(), {
        types: types,
        textAnswers: textAnswers,
        checkAnswers: checkAnswers,
        radioAnswers: radioAnswers,
        icon: this.icons[type]
      });
    };

    QuestionView.prototype.render = function() {
      this.$el.html(this.template.render(this.data()));
      return this;
    };

    return QuestionView;

  })(Backbone.View);

  SurveyShowView = (function(_super) {

    __extends(SurveyShowView, _super);

    SurveyShowView.name = 'SurveyShowView';

    function SurveyShowView() {
      return SurveyShowView.__super__.constructor.apply(this, arguments);
    }

    SurveyShowView.prototype.template = "<div id=\"title-show\" class=\"category\">\n  <h1 id=\"title\">{{ title }}</h1>\n</div>\n<div id=\"questions\">\n</div>";

    SurveyShowView.prototype.itemView = QuestionView;

    SurveyShowView.prototype.initialize = function() {
      this.collection = this.model.getQuestions();
      $.when(this.collection).then(function(collection) {
        return console.log('questions of survey', this.model, collection);
      });
      return SurveyShowView.__super__.initialize.apply(this, arguments);
    };

    SurveyShowView.prototype.render = function() {
      this.$el.html(this.template.render(this.model.toJSON()));
      this.$collection = this.$('#questions');
      SurveyShowView.__super__.render.apply(this, arguments);
      console.log('@$collection', this.$collection);
      return this;
    };

    return SurveyShowView;

  })(CollectionView);

  SurveyEditView = (function(_super) {

    __extends(SurveyEditView, _super);

    SurveyEditView.name = 'SurveyEditView';

    function SurveyEditView() {
      this.closeTitle = __bind(this.closeTitle, this);

      this.onClose = __bind(this.onClose, this);

      this.onEdit = __bind(this.onEdit, this);

      this.createQuestion = __bind(this.createQuestion, this);

      this.destroy = __bind(this.destroy, this);

      this.publish = __bind(this.publish, this);

      this.onSync = __bind(this.onSync, this);

      this.onSetTitle = __bind(this.onSetTitle, this);
      return SurveyEditView.__super__.constructor.apply(this, arguments);
    }

    SurveyEditView.prototype.template = "<div class=\"editable\" id=\"title-section\">\n  <div class=\"add-section edit\">\n    <form id=\"title-edit\" action=\"\">\n      <input id=\"title-input\" type=\"text\" class=\"add edit\" placeholder=\"Tytuł nowej ankiety\" autofocus=\"autofocus\" value=\"{{ title }}\"/>\n      <div class=\"form-actions\">\n        <button type=\"submit\" id=\"title-submit\" class=\"btn btn-primary btn-large pull-right\">\n          <i class=\"icon-pencil icon-white\"></i>\n          Zapisz tytuł\n        </button>\n      </div>\n    </form>\n  </div>\n\n  <div id=\"title-show\" class=\"category show\">\n    <h1 id=\"title\">{{ title }}</h1>\n  </div>\n</div>\n<div id=\"questions\">\n</div>\n<section class=\"top-level-action-block\">\n  <div>\n    <div class=\"add-section \">\n      <input type=\"text\" class=\"new-question-button add top-level-actions\" placeholder=\"Treść nowego pytania\"/>\n    </div>\n  </div>\n</section>\n<div class=\"form-actions section\">\n  <button class=\"destroy btn btn-large\">\n    <i class=\"icon-remove\"></i>\n    Usuń ankietę\n  </button>\n  \n  <button id=\"survey-submit\" class=\"btn btn-large btn-primary pull-right top-level-actions\">\n    <i class=\"icon-ok icon-white\"></i>\n    Opublikuj ankietę\n  </button>\n  \n</div>";

    SurveyEditView.prototype.itemView = QuestionEditView;

    SurveyEditView.prototype.initialize = function() {
      var _this = this;
      this.surveys = window.app.Surveys;
      this.collection = this.model.getQuestions();
      this.model.on('change:title', this.onSetTitle);
      this.model.on('sync', this.onSync);
      $.when(this.collection).then(function(collection) {
        collection.on('edit', _this.onEdit);
        return collection.on('close', _this.onClose);
      });
      return SurveyEditView.__super__.initialize.apply(this, arguments);
    };

    SurveyEditView.prototype.events = {
      'click .new-question-button': 'createQuestion',
      'submit #title-edit': 'closeTitle',
      'click #title-show': 'openTitle',
      'click .destroy': 'destroy',
      'click #survey-submit': 'publish'
    };

    SurveyEditView.prototype.onSetTitle = function() {
      var collection;
      console.log('on set ttitle');
      collection = window.app.Surveys;
      if (!collection.include(this.model)) {
        return collection.add(this.model);
      }
    };

    SurveyEditView.prototype.onSync = function() {
      return window.app.Surveys.trigger('publish', this.model);
    };

    SurveyEditView.prototype.publish = function(e) {
      if (e != null) {
        e.preventDefault();
      }
      console.log('publish');
      return this.model.save();
    };

    SurveyEditView.prototype.destroy = function(e) {
      var _this = this;
      e.preventDefault();
      console.log('destroy');
      this.model.destroy();
      return $.when(this.collection).then(function(collection) {
        collection.remove(_this.model);
        return app.navigate('/surveys', true);
      });
    };

    SurveyEditView.prototype.createQuestion = function() {
      var question,
        _this = this;
      question = new Question();
      return $.when(this.collection).then(function(collection) {
        collection.add(question);
        return collection.trigger('edit', question);
      });
    };

    SurveyEditView.prototype.onEdit = function(model) {
      if (model === this.model) {

      } else {
        this.closeTitle();
      }
      this.$('.top-level-action-block').addClass('hidden');
      return this.$('.top-level-actions').attr('disabled', 'disabled');
    };

    SurveyEditView.prototype.onClose = function() {
      this.$('.top-level-action-block').removeClass('hidden');
      return this.$('.top-level-actions').attr('disabled', false);
    };

    SurveyEditView.prototype.closeTitle = function(e) {
      var previousTitle, title,
        _this = this;
      if (e != null) {
        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
      }
      previousTitle = this.model.get('title');
      title = this.$titleInput.val();
      if (title.length === 0) {
        return this.openTitle();
      } else {
        this.model.set({
          title: title
        });
        this.$title.html(title);
        this.$titleSection.removeClass('active');
        return $.when(this.collection).then(function(collection) {
          return collection.trigger('close');
        });
      }
    };

    SurveyEditView.prototype.openTitle = function() {
      var _this = this;
      this.$titleSection.addClass('active');
      this.$titleInput.focus();
      return $.when(this.collection).then(function(collection) {
        return collection.trigger('edit', _this.model);
      });
    };

    SurveyEditView.prototype.updateState = function() {
      var title;
      title = this.model.get('title');
      if (!title) {
        return this.openTitle();
      }
    };

    SurveyEditView.prototype.render = function() {
      this.$el.html(this.template.render(this.model.toJSON()));
      this.$collection = this.$('#questions');
      this.$newQuestionInput = this.$('#new-question');
      this.$submit = this.$('#survey-submit');
      this.$titleSection = this.$('#title-section');
      this.$title = this.$('#title');
      this.$titleInput = this.$('#title-input');
      this.$titleEdit = this.$('#title-edit');
      this.$titleShow = this.$('#title-show');
      this.$titleSubmit = this.$('#title-submit');
      this.updateState();
      SurveyEditView.__super__.render.apply(this, arguments);
      return this;
    };

    return SurveyEditView;

  })(CollectionView);

  App = (function(_super) {

    __extends(App, _super);

    App.name = 'App';

    function App() {
      this.showSurveyById = __bind(this.showSurveyById, this);

      this.showSurvey = __bind(this.showSurvey, this);

      this.onSelectSurvey = __bind(this.onSelectSurvey, this);
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.routes = {
      '': 'index',
      'notifications': 'notifications',
      'surveys': 'surveys',
      'surveys/new': 'newSurvey',
      'surveys/:id': 'showSurveyById'
    };

    App.prototype.initialize = function() {
      var _this = this;
      this.on('all', this.updateLinks);
      this.$main = $('body');
      this.Notifications = new Notifications();
      this.Surveys = new Surveys();
      this.Surveys.on('new', function() {
        return _this.navigate('surveys/new', true);
      });
      this.Surveys.on('show', this.onSelectSurvey);
      return this.Surveys.on('publish', function(model) {
        _this.Surveys.add(model);
        return _this.navigate("surveys/" + model.id, true);
      });
    };

    App.prototype.onSelectSurvey = function(model) {
      this.Surveys.active = model;
      this.navigate("surveys/" + (model.id || model.cid));
      return this.showSurvey(model);
    };

    App.prototype.setView = function(view) {
      return this.$main.html(view.render().el);
    };

    App.prototype.notifications = function() {
      this.setView(new NotificationsView({
        collection: this.Notifications
      }));
      return this.Notifications.fetch();
    };

    App.prototype.surveys = function() {
      var addView, collection, listView, view;
      collection = this.Surveys;
      collection.active = null;
      listView = new CollectionView({
        collection: collection,
        itemView: SurveyView,
        prepend: true
      });
      addView = new AddView({
        collection: collection,
        placeholder: 'Tytuł nowej ankiety'
      });
      view = new MenuLayout({
        title: 'Ankiety',
        listView: listView,
        addView: addView
      });
      this.setView(view);
      return collection.load();
    };

    App.prototype.newSurvey = function() {
      var collection, listView, mainView, model, view;
      model = new Survey();
      collection = this.Surveys;
      collection.active = model;
      mainView = new SurveyEditView({
        model: model
      });
      listView = new CollectionView({
        collection: collection,
        itemView: SurveyView,
        prepend: true,
        active: model
      });
      view = new SidebarLayout({
        title: 'Ankiety',
        backLink: '#/surveys',
        mainView: mainView,
        listView: listView
      });
      this.setView(view);
      collection.load();
      return mainView.openTitle();
    };

    App.prototype.showSurvey = function(model) {
      var collection, listView, mainView, view;
      collection = this.Surveys;
      console.log('showSurvey', model);
      mainView = model.id != null ? new SurveyShowView({
        model: model
      }) : new SurveyEditView({
        model: model
      });
      listView = new CollectionView({
        collection: collection,
        itemView: SurveyView,
        prepend: true
      });
      view = new SidebarLayout({
        title: 'Ankiety',
        backLink: '#/surveys',
        mainView: mainView,
        listView: listView
      });
      return this.setView(view);
    };

    App.prototype.showSurveyById = function(id) {
      var _this = this;
      console.log('showSurveyById', id);
      return $.when(this.Surveys.load()).then(function(collection) {
        var model;
        model = collection.get(id) || collection.getByCid(id);
        console.log('showSurveyById', model);
        if (model != null) {
          return _this.showSurvey(model);
        } else {
          return _this.navigate('/surveys', true);
        }
      });
    };

    App.prototype.index = function() {
      return this.navigate('notifications', true);
    };

    App.prototype.updateLinks = function() {
      var hash;
      hash = window.location.hash;
      return $("a[href].link").each(function() {
        var active, href;
        href = $(this).attr('href');
        active = hash === href || hash.startsWith(href) && hash.charAt(href.length) === '/';
        return $(this).parent().toggleClass('active', active);
      });
    };

    return App;

  })(Backbone.Router);

  $(function() {
    var _ref;
    window.app = new App;
    return (_ref = Backbone.history) != null ? _ref.start() : void 0;
  });

}).call(this);
